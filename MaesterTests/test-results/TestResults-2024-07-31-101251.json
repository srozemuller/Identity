{
  "Result": "Failed",
  "FailedCount": 62,
  "PassedCount": 47,
  "SkippedCount": 24,
  "TotalCount": 139,
  "ExecutedAt": "2024-07-31T10:12:52.117091+02:00",
  "TenantId": "d9e7bad9-ae68-4a71-9c92-8508128134a2",
  "TenantName": "rozemuller",
  "Account": "srozemuller@rozemuller.onmicrosoft.com",
  "CurrentVersion": "0.2.0",
  "LatestVersion": "0.2.0",
  "Tests": [
    {
      "Name": "EIDSCA.AF01: Authentication Method - FIDO2 security key - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAF01 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": {
        "TestDescription": "Whether the FIDO2 security keys is enabled in the tenant.\r\n\r\nenabled\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\r\n.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AF02: Authentication Method - FIDO2 security key - Allow self-service set up.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .isSelfServiceRegistrationAllowed = 'true'\r\n        #>\r\n        Test-MtEidscaAF02 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": {
        "TestDescription": "Allows users to register a FIDO key through the MySecurityInfo portal, even if enabled by Authentication Methods policy.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\r\n.isSelfServiceRegistrationAllowed = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AF03: Authentication Method - FIDO2 security key - Enforce attestation.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .isAttestationEnforced = 'true'\r\n        #>\r\n        Test-MtEidscaAF03 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": {
        "TestDescription": "Requires the FIDO security key metadata to be published and verified with the FIDO Alliance Metadata Service, and also pass Microsoft's additional set of validation testing.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\r\n.isAttestationEnforced = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AF04: Authentication Method - FIDO2 security key - Enforce key restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF04"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .keyRestrictions.isEnforced = 'true'\r\n        #>\r\n        Test-MtEidscaAF04 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "314",
            "LineText": "        Test-MtEidscaAF04 | Should -Be 'true'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 314\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": {
        "TestDescription": "Manages if registration of FIDO2 keys should be restricted.\r\n\r\nRestrict usage of FIDO2 from unauthorized vendors or platforms\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\r\n.keyRestrictions.isEnforced = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [fido2AuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/fido2authenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AG01: Authentication Method - General Settings - Manage migration.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\r\n            .policyMigrationState = 'migrationComplete'\r\n        #>\r\n        Test-MtEidscaAG01 | Should -Be 'migrationComplete'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 17\nActual length:   12\nStrings differ at index 0.\nExpected: 'migrationComplete'\nBut was:  'preMigration'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 17\nActual length:   12\nStrings differ at index 0.\nExpected: 'migrationComplete'\nBut was:  'preMigration'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "186",
            "LineText": "        Test-MtEidscaAG01 | Should -Be 'migrationComplete'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 186\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Authentication Method - General Settings",
      "ResultDetail": {
        "TestDescription": "The state of migration of the authentication methods policy from the legacy multifactor authentication and self-service password reset (SSPR) policies. In January 2024, the legacy multifactor authentication and self-service password reset policies will be deprecated and you'll manage all authentication methods here in the authentication methods policy. Use this control to manage your migration from the legacy policies to the new unified policy.\r\n\r\nIn January 2024, the legacy multifactor authentication and self-service password reset policies will be deprecated and you'll manage all authentication methods here in the authentication methods policy. Use this control to manage your migration from the legacy policies to the new unified policy.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\r\n.policyMigrationState = 'migrationComplete'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [Get authenticationMethodsPolicy - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/authenticationmethodspolicy-get)\r\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **preMigration**.\n\nThe recommended value is **'migrationComplete'** for **policies/authenticationMethodsPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AG02: Authentication Method - General Settings - Report suspicious activity - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG02"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\r\n            .reportSuspiciousActivitySettings.state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAG02 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 7\nActual length:   8\nStrings differ at index 0.\nExpected: 'enabled'\nBut was:  'disabled'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 7\nActual length:   8\nStrings differ at index 0.\nExpected: 'enabled'\nBut was:  'disabled'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "195",
            "LineText": "        Test-MtEidscaAG02 | Should -Be 'enabled'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 195\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Authentication Method - General Settings",
      "ResultDetail": {
        "TestDescription": "Allows users to report suspicious activities if they receive an authentication request that they did not initiate. This control is available when using the Microsoft Authenticator app and voice calls. Reporting suspicious activity will set the user's risk to high. If the user is subject to risk-based Conditional Access policies, they may be blocked.\r\n\r\nAllows to integrate report of fraud attempt by users to identity protection: Users who report an MFA prompt as suspicious are set to High User Risk. Administrators can use risk-based policies to limit access for these users, or enable self-service password reset (SSPR) for users to remediate problems on their own.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\r\n.reportSuspiciousActivitySettings.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [Get authenticationMethodsPolicy - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/authenticationmethodspolicy-get)\r\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AuthMethodsSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **disabled**.\n\nThe recommended value is **'enabled'** for **policies/authenticationMethodsPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AG03: Authentication Method - General Settings - Report suspicious activity - Included users/groups.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AG03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\"\r\n            .reportSuspiciousActivitySettings.includeTarget.id = 'all_users'\r\n        #>\r\n        Test-MtEidscaAG03 | Should -Be 'all_users'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - General Settings",
      "ResultDetail": {
        "TestDescription": "Object Id or scope of users which will be included to report suspicious activities if they receive an authentication request that they did not initiate.\r\n\r\nApply this feature to all users.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy\r\n.reportSuspiciousActivitySettings.includeTarget.id = 'all_users'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [Get authenticationMethodsPolicy - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/authenticationmethodspolicy-get)\r\n- [View in Microsoft Entra admin center](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AuthMethodsSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM01: Authentication Method - Microsoft Authenticator - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAM01 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Whether the Authenticator App is enabled in the tenant.\r\n\r\nenabled\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM02: Authentication Method - Microsoft Authenticator - Allow use of Microsoft Authenticator OTP.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAM02 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Defines if users can use the OTP code generated by the Authenticator App.\r\n\r\nenabled\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM03: Authentication Method - Microsoft Authenticator - Require number matching for push notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.numberMatchingRequiredState.state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAM03 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Defines if number matching is required for MFA notifications.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.numberMatchingRequiredState.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM04: Authentication Method - Microsoft Authenticator - Included users/groups of number matching for push notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM04"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.numberMatchingRequiredState.includeTarget.id = 'all_users'\r\n        #>\r\n        Test-MtEidscaAM04 | Should -Be 'all_users'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Object Id or scope of users which will be showing number matching in the Authenticator App.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.numberMatchingRequiredState.includeTarget.id = 'all_users'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM06: Authentication Method - Microsoft Authenticator - Show application name in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM06"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.displayAppInformationRequiredState.state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAM06 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Determines whether the user's Authenticator app will show them the client app they are signing into.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.displayAppInformationRequiredState.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM07: Authentication Method - Microsoft Authenticator - Included users/groups to show application name in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM07",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM07"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.displayAppInformationRequiredState.includeTarget.id = 'all_users'\r\n        #>\r\n        Test-MtEidscaAM07 | Should -Be 'all_users'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Object Id or scope of users which will be showing app information in the Authenticator App.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.displayAppInformationRequiredState.includeTarget.id = 'all_users'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM09: Authentication Method - Microsoft Authenticator - Show geographic location in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM09"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.displayLocationInformationRequiredState.state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAM09 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Determines whether the user's Authenticator app will show them the geographic location of where the authentication request originated from.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.displayLocationInformationRequiredState.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AM10: Authentication Method - Microsoft Authenticator - Included users/groups to show geographic location in push and passwordless notifications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AM10",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM10"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\"\r\n            .featureSettings.displayLocationInformationRequiredState.includeTarget.id = 'all_users'\r\n        #>\r\n        Test-MtEidscaAM10 | Should -Be 'all_users'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Microsoft Authenticator",
      "ResultDetail": {
        "TestDescription": "Object Id or scope of users which will be showing geographic location in the Authenticator App.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')\r\n.featureSettings.displayLocationInformationRequiredState.includeTarget.id = 'all_users'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [microsoftAuthenticatorAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/microsoftauthenticatorauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'all_users'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('MicrosoftAuthenticator')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP01: Default Authorization Settings - Enabled Self service password reset for administrators.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .allowedToUseSSPR = 'false'\r\n        #>\r\n        Test-MtEidscaAP01 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "11",
            "LineText": "        Test-MtEidscaAP01 | Should -Be 'false'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 11\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Indicates whether administrators of the tenant can use the Self-Service Password Reset (SSPR). The policy applies to some critical critical roles in Microsoft Entra ID.\r\n\r\nAdministrators with sensitive roles should use phishing-resistant authentication methods only and therefore not able to reset their password using SSPR.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.allowedToUseSSPR = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **True**.\n\nThe recommended value is **'false'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP04: Default Authorization Settings - Guest invite restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP04"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .allowInvitesFrom = 'adminsAndGuestInviters'\r\n        #>\r\n        Test-MtEidscaAP04 | Should -Be 'adminsAndGuestInviters'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Manages controls who can invite guests to your directory to collaborate on resources secured by your Azure AD, such as SharePoint sites or Azure resources.\r\n\r\nCISA SCuBA 2.18: Only users with the Guest Inviter role SHOULD be able to invite guest users\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.allowInvitesFrom = 'adminsAndGuestInviters'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'adminsAndGuestInviters'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP05: Default Authorization Settings - Sign-up for email based subscription.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP05"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .allowedToSignUpEmailBasedSubscriptions = 'false'\r\n        #>\r\n        Test-MtEidscaAP05 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   4\nStrings differ at index 0.\nExpected: 'false'\nBut was:  'True'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "29",
            "LineText": "        Test-MtEidscaAP05 | Should -Be 'false'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 29\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Indicates whether users can sign up for email based subscriptions.\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.allowedToSignUpEmailBasedSubscriptions = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **True**.\n\nThe recommended value is **'false'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP06: Default Authorization Settings - User can join the tenant by email validation.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP06"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .allowEmailVerifiedUsersToJoinOrganization = 'false'\r\n        #>\r\n        Test-MtEidscaAP06 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Controls whether users can join the tenant by email validation. To join, the user must have an email address in a domain which matches one of the verified domains in the tenant.\r\n\r\n[Self-service sign up for email-verified users - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/enterprise-users/directory-self-service-signup)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.allowEmailVerifiedUsersToJoinOrganization = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'false'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP07: Default Authorization Settings - Guest user access.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP07",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP07"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .guestUserRoleId = '2af84b1e-32c8-42b7-82bc-daa82404023b'\r\n        #>\r\n        Test-MtEidscaAP07 | Should -Be '2af84b1e-32c8-42b7-82bc-daa82404023b'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nString lengths are both 36.\nStrings differ at index 0.\nExpected: '2af84b1e-32c8-42b7-82bc-daa82404023b'\nBut was:  '10dae51f-b6af-4016-8d66-8c2a99b929b3'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nString lengths are both 36.\nStrings differ at index 0.\nExpected: '2af84b1e-32c8-42b7-82bc-daa82404023b'\nBut was:  '10dae51f-b6af-4016-8d66-8c2a99b929b3'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "47",
            "LineText": "        Test-MtEidscaAP07 | Should -Be '2af84b1e-32c8-42b7-82bc-daa82404023b'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 47\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Represents role templateId for the role that should be granted to guest user.\r\n\r\nCISA SCuBA 2.18: Guest users SHOULD have limited access to Azure AD directory objects.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.guestUserRoleId = '2af84b1e-32c8-42b7-82bc-daa82404023b'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AllowlistPolicyBlade)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **10dae51f-b6af-4016-8d66-8c2a99b929b3**.\n\nThe recommended value is **'2af84b1e-32c8-42b7-82bc-daa82404023b'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP08: Default Authorization Settings - User consent policy assigned for applications.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP08",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP08"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .permissionGrantPolicyIdsAssignedToDefaultUserRole | Sort-Object -Descending | select-object -first 1 = 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\r\n        #>\r\n        Test-MtEidscaAP08 | Should -Be 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 56\nActual length:   59\nStrings differ at index 54.\nExpected: 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\nBut was:  'ManagePermissionGrantsForSelf.microsoft-user-default-legacy'\n           ------------------------------------------------------^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 56\nActual length:   59\nStrings differ at index 54.\nExpected: 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\nBut was:  'ManagePermissionGrantsForSelf.microsoft-user-default-legacy'\n           ------------------------------------------------------^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "56",
            "LineText": "        Test-MtEidscaAP08 | Should -Be 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 56\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Defines if user consent to apps is allowed, and if it is, which app consent policy (permissionGrantPolicy) governs the permissions.\r\n\r\nMicrosoft recommends to allow to user consent for apps from verified publisher for selected permissions. CISA SCuBA 2.7 defines that all Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.permissionGrantPolicyIdsAssignedToDefaultUserRole | Sort-Object -Descending | select-object -first 1 = 'ManagePermissionGrantsForSelf.microsoft-user-default-low'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **ManagePermissionGrantsForSelf.microsoft-user-default-legacy**.\n\nThe recommended value is **'ManagePermissionGrantsForSelf.microsoft-user-default-low'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP09: Default Authorization Settings - Risk-based step-up consent.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP09"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .allowUserConsentForRiskyApps = 'false'\r\n        #>\r\n        Test-MtEidscaAP09 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   0\nStrings differ at index 0.\nExpected: 'false'\nBut was:  ''\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 5\nActual length:   0\nStrings differ at index 0.\nExpected: 'false'\nBut was:  ''\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "65",
            "LineText": "        Test-MtEidscaAP09 | Should -Be 'false'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 65\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Indicates whether user consent for risky apps is allowed. For example, consent requests for newly registered multi-tenant apps that are not publisher verified and require non-basic permissions are considered risky.\r\n\r\n[Configure risk-based step-up consent - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/manage-apps/configure-risk-based-step-up-consent)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.allowUserConsentForRiskyApps = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as ****.\n\nThe recommended value is **'false'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP10: Default Authorization Settings - Default User Role Permissions - Allowed to create Apps.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP10",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP10"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .defaultUserRolePermissions.allowedToCreateApps = 'false'\r\n        #>\r\n        Test-MtEidscaAP10 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Controls if non-admin users may register custom-developed applications for use within this directory.\r\n\r\nCISA SCuBA 2.6: Only Administrators SHALL Be Allowed To Register Third-Party Applications\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.defaultUserRolePermissions.allowedToCreateApps = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/~/UserSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'false'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AP14: Default Authorization Settings - Default User Role Permissions - Allowed to read other users.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AP14",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP14"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authorizationPolicy\"\r\n            .defaultUserRolePermissions.allowedToReadOtherUsers = 'true'\r\n        #>\r\n        Test-MtEidscaAP14 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Authorization Settings",
      "ResultDetail": {
        "TestDescription": "Prevents all non-admins from reading user information from the directory. This flag doesn't prevent reading user information in other Microsoft services like Exchange Online.\r\n\r\nRestrict this default permissions for members have huge impact on collaboration features and user lookup.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authorizationPolicy\r\n.defaultUserRolePermissions.allowedToReadOtherUsers = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authorizationPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [authorizationPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/authorizationpolicy)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authorizationPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AT01: Authentication Method - Temporary Access Pass - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AT01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AT01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\"\r\n            .state = 'enabled'\r\n        #>\r\n        Test-MtEidscaAT01 | Should -Be 'enabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Temporary Access Pass",
      "ResultDetail": {
        "TestDescription": "Whether the Temporary Access Pass is enabled in the tenant.\r\n\r\nUse Temporary Access Pass for secure onboarding users (initial password replacement) and enforce MFA for registering security information in Conditional Access Policy.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\r\n.state = 'enabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [temporaryAccessPassAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/temporaryaccesspassauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'enabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AT02: Authentication Method - Temporary Access Pass - One-time.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AT02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AT02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\"\r\n            .isUsableOnce = 'true'\r\n        #>\r\n        Test-MtEidscaAT02 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Temporary Access Pass",
      "ResultDetail": {
        "TestDescription": "Determines whether the pass is limited to a one-time use.\r\n\r\nAvoid to allow reusable passes and restrict usage to one-time use (if applicable)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')\r\n.isUsableOnce = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [temporaryAccessPassAuthenticationMethodConfiguration resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/temporaryaccesspassauthenticationmethodconfiguration)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'true'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('TemporaryAccessPass')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AV01: Authentication Method - Voice call - State.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AV01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AV01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')\"\r\n            .state = 'disabled'\r\n        #>\r\n        Test-MtEidscaAV01 | Should -Be 'disabled'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - Voice call",
      "ResultDetail": {
        "TestDescription": "Whether the Voice call is enabled in the tenant.\r\n\r\nChoose authentication methods with number matching (Authenticator) \r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')\r\n.state = 'disabled'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'disabled'** for **policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Voice')**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.CP01: Default Settings - Consent Policy Settings - Group owner consent for apps accessing data.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'EnableGroupSpecificConsent' | select-object -expand value = 'False'\r\n        #>\r\n        Test-MtEidscaCP01 | Should -Be 'False'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected 'False', but got $null.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected 'False', but got $null.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "93",
            "LineText": "        Test-MtEidscaCP01 | Should -Be 'False'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 93\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Settings - Consent Policy Settings",
      "ResultDetail": {
        "TestDescription": "Group and team owners can authorize applications, such as applications published by third-party vendors, to access your organization's data associated with a group. For example, a team owner in Microsoft Teams can allow an app to read all Teams messages in the team, or list the basic profile of a group's members.\r\n\r\nCISA SCuBA 2.7: Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'EnableGroupSpecificConsent' | select-object -expand value = 'False'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is **not configured explicitly**.\n\nThe recommended value is **'False'** for **settings**. It seems that you are using a default value by Microsoft. We recommend to set the setting value explicitly since non set values could change depending on what Microsoft decides the current default should be.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.CP03: Default Settings - Consent Policy Settings - Block user consent for risky apps.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP03"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'BlockUserConsentForRiskyApps' | select-object -expand value = 'true'\r\n        #>\r\n        Test-MtEidscaCP03 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected 'true', but got $null.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected 'true', but got $null.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "102",
            "LineText": "        Test-MtEidscaCP03 | Should -Be 'true'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 102\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Settings - Consent Policy Settings",
      "ResultDetail": {
        "TestDescription": "Defines whether user consent will be blocked when a risky request is detected\r\n\r\n[Configure risk-based step-up consent - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/manage-apps/configure-risk-based-step-up-consent)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'BlockUserConsentForRiskyApps' | select-object -expand value = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is **not configured explicitly**.\n\nThe recommended value is **'true'** for **settings**. It seems that you are using a default value by Microsoft. We recommend to set the setting value explicitly since non set values could change depending on what Microsoft decides the current default should be.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.CP04: Default Settings - Consent Policy Settings - Users can request admin consent to apps they are unable to consent to.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CP04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP04"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'EnableAdminConsentRequests' | select-object -expand value = 'true'\r\n        #>\r\n        Test-MtEidscaCP04 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected 'true', but got $null.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected 'true', but got $null.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "111",
            "LineText": "        Test-MtEidscaCP04 | Should -Be 'true'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 111\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Settings - Consent Policy Settings",
      "ResultDetail": {
        "TestDescription": "If this option is set to enabled, then users request admin consent to any app that requires access to data they do not have the permission to grant. If this option is set to disabled, then users must contact their admin to request to consent in order to use the apps they need.\r\n\r\nCISA SCuBA 2.7: Non-Admin Users SHALL Be Prevented From Providing Consent To Third-Party Applications.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'EnableAdminConsentRequests' | select-object -expand value = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is **not configured explicitly**.\n\nThe recommended value is **'true'** for **settings**. It seems that you are using a default value by Microsoft. We recommend to set the setting value explicitly since non set values could change depending on what Microsoft decides the current default should be.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.CR01: Consent Framework - Admin Consent Request - Policy to enable or disable admin consent request feature.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR01"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\r\n            .isEnabled = 'true'\r\n        #>\r\n        Test-MtEidscaCR01 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, but they were different.\nExpected length: 4\nActual length:   5\nStrings differ at index 0.\nExpected: 'true'\nBut was:  'False'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "371",
            "LineText": "        Test-MtEidscaCR01 | Should -Be 'true'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 371\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Consent Framework - Admin Consent Request",
      "ResultDetail": {
        "TestDescription": "Defines if admin consent request feature is enabled or disabled\r\n\r\n\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\r\n.isEnabled = 'true'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=policies/adminConsentRequestPolicy&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [adminConsentRequestPolicy resource type - Microsoft Graph v1.0 | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/adminconsentrequestpolicy)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is configured as **False**.\n\nThe recommended value is **'true'** for **policies/adminConsentRequestPolicy**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.PR01: Default Settings - Password Rule Settings - Password Protection - Mode.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR01",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR01"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'BannedPasswordCheckOnPremisesMode' | select-object -expand value = 'Enforce'\r\n        #>\r\n        Test-MtEidscaPR01 | Should -Be 'Enforce'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Settings - Password Rule Settings",
      "ResultDetail": {
        "TestDescription": "If set to Enforce, users will be prevented from setting banned passwords and the attempt will be logged. If set to Audit, the attempt will only be logged.\r\n\r\n[Microsoft Entra Password Protection - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad-on-premises)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'BannedPasswordCheckOnPremisesMode' | select-object -expand value = 'Enforce'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'Enforce'** for **settings**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.PR02: Default Settings - Password Rule Settings - Password Protection - Enable password protection on Windows Server Active Directory.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR02"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'EnableBannedPasswordCheckOnPremises' | select-object -expand value = 'True'\r\n        #>\r\n        Test-MtEidscaPR02 | Should -Be 'True'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Settings - Password Rule Settings",
      "ResultDetail": {
        "TestDescription": "If set to Yes, password protection is turned on for Active Directory domain controllers when the appropriate agent is installed.\r\n\r\n[Azure identity & access security best practices - Microsoft Learn](https://learn.microsoft.com/en-us/azure/security/fundamentals/identity-management-best-practices#enable-password-management)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'EnableBannedPasswordCheckOnPremises' | select-object -expand value = 'True'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'True'** for **settings**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.PR03: Default Settings - Password Rule Settings - Enforce custom list.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR03"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'EnableBannedPasswordCheck' | select-object -expand value = 'True'\r\n        #>\r\n        Test-MtEidscaPR03 | Should -Be 'True'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Settings - Password Rule Settings",
      "ResultDetail": {
        "TestDescription": "When enabled, the words in the list below are used in the banned password system to prevent easy-to-guess passwords.\r\n\r\n[Password protection in Microsoft Entra ID - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/concept-password-ban-bad#global-banned-password-list)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'EnableBannedPasswordCheck' | select-object -expand value = 'True'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'True'** for **settings**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.PR05: Default Settings - Password Rule Settings - Smart Lockout - Lockout duration in seconds.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR05"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'LockoutDurationInSeconds' | select-object -expand value >= '60'\r\n        #>\r\n        Test-MtEidscaPR05 | Should -BeGreaterOrEqual '60'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Settings - Password Rule Settings",
      "ResultDetail": {
        "TestDescription": "The minimum length in seconds of each lockout. If an account locks repeatedly, this duration increases.\r\n\r\n[Prevent attacks using smart lockout - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/howto-password-smart-lockout)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'LockoutDurationInSeconds' | select-object -expand value >= '60'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is greater than or equal to **'60'** for **settings**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.PR06: Default Settings - Password Rule Settings - Smart Lockout - Lockout threshold.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.PR06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR06"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'LockoutThreshold' | select-object -expand value = '10'\r\n        #>\r\n        Test-MtEidscaPR06 | Should -Be '10'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Default Settings - Password Rule Settings",
      "ResultDetail": {
        "TestDescription": "How many failed sign-ins are allowed on an account before its first lockout. If the first sign-in after a lockout also fails, the account locks out again.\r\n\r\n[Prevent attacks using smart lockout - Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/en-us/azure/active-directory/authentication/howto-password-smart-lockout)\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'LockoutThreshold' | select-object -expand value = '10'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n- [View in Microsoft Entra admin center](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/PasswordProtection)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. The configuration in your tenant and recommended value is **'10'** for **settings**\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.ST08: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to become Group Owner.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.ST08",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.ST08"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'AllowGuestsToBeGroupOwner' | select-object -expand value = 'false'\r\n        #>\r\n        Test-MtEidscaST08 | Should -Be 'false'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected 'false', but got $null.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected 'false', but got $null.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "167",
            "LineText": "        Test-MtEidscaST08 | Should -Be 'false'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 167\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Settings - Classification and M365 Groups",
      "ResultDetail": {
        "TestDescription": "Indicating whether or not a guest user can be an owner of groups\r\n\r\nCISA SCuBA 2.18: Guest users SHOULD have limited access to Azure AD directory objects\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'AllowGuestsToBeGroupOwner' | select-object -expand value = 'false'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is **not configured explicitly**.\n\nThe recommended value is **'false'** for **settings**. It seems that you are using a default value by Microsoft. We recommend to set the setting value explicitly since non set values could change depending on what Microsoft decides the current default should be.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.ST09: Default Settings - Classification and M365 Groups - M365 groups - Allow Guests to have access to groups content.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.ST09",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.ST09"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/settings\"\r\n            .values | where-object name -eq 'AllowGuestsToAccessGroups' | select-object -expand value = 'True'\r\n        #>\r\n        Test-MtEidscaST09 | Should -Be 'True'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected 'True', but got $null.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected 'True', but got $null.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
            "Line": "176",
            "LineText": "        Test-MtEidscaST09 | Should -Be 'True'\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1: line 176\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Default Settings - Classification and M365 Groups",
      "ResultDetail": {
        "TestDescription": "Indicating whether or not a guest user can have access to Microsoft 365 groups content. This setting does not require an Azure Active Directory Premium P1 license.\r\n\r\nManages if guest accounts can access resources through Microsoft 365 Group membership and could break collaboration if you disable it.\r\n\r\n#### Test script\r\n```\r\nhttps://graph.microsoft.com/beta/settings\r\n.values | where-object name -eq 'AllowGuestsToAccessGroups' | select-object -expand value = 'True'\r\n```\r\n\r\n#### Related links\r\n\r\n- [Open in Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer?request=settings&method=GET&version=beta&GraphUrl=https://graph.microsoft.com)\r\n- [directorySetting resource type - Microsoft Graph beta | Microsoft Learn](https://learn.microsoft.com/en-us/graph/api/resources/directorysetting)\r\n\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant is **not configured explicitly**.\n\nThe recommended value is **'True'** for **settings**. It seems that you are using a default value by Microsoft. We recommend to set the setting value explicitly since non set values could change depending on what Microsoft decides the current default should be.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.1.1: Legacy authentication SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.1.1",
        "CISA",
        "Security",
        "All",
        "MS.AAD"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaBlockLegacyAuth | Should -Be $true -Because \"an enabled policy for all users blocking legacy auth access shall exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockLegacyAuth.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Legacy authentication SHALL be blocked.\r\n\r\nRationale: The security risk of allowing legacy authentication protocols is they do not support MFA. Blocking legacy protocols reduces the impact of user credential theft.\r\n\r\n#### Remediation action:\r\n\r\nFollow the guide below to create a conditional access policy that blocks legacy authentication.\r\n\r\n- [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy#create-a-conditional-access-policy)\r\n\r\n#### Related links\r\n\r\n- [CISA Legacy Authentication - MS.AAD.1.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#1-legacy-authentication)\r\n- [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L47)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant has one or more policies that block legacy authentication:\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161)\n\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.2.1: Users detected as high risk SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaBlockHighRiskUser | Should -Be $true -Because \"an enabled policy for all users blocking high risk users shall exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskUsers.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled policy for all users blocking high risk users shall exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled policy for all users blocking high risk users shall exist., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskUsers.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaBlockHighRiskUser | Should -Be $true -Because \"an enabled policy for all users blocking high risk users shall exist.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskUsers.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Users detected as high risk SHALL be blocked.\r\n\r\nRationale: Blocking high-risk users may prevent compromised accounts from accessing the tenant. This prevents compromised accounts from accessing the tenant.\r\n\r\n#### Remediation action:\r\n\r\nCreate a conditional access policy blocking users categorized as high risk by the Identity Protection service. Configure the following policy settings in the new conditional access policy as per the values below:\r\n\r\n* Users > Include > **All users**\r\n* Target resources > Cloud apps > **All cloud apps**\r\n* Conditions > User risk > **High**\r\n* Access controls > Grant > **Block Access**\r\n\r\n#### Related links\r\n\r\n* [CISA Risk Based Policies - MS.AAD.2.1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad21v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L85)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that block high risk users.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.2.2: A notification SHOULD be sent to the administrator when high-risk users are detected.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaNotifyHighRisk | Should -Be $true -Because \"an enabled is a recipient of risky user login notifications.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaNotifyHighRiskUsers.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "A notification SHOULD be sent to the administrator when high-risk users are detected.\r\n\r\nRationale: Notification enables the admin to monitor the event and remediate the risk. This helps the organization proactively respond to cyber intrusions as they occur.\r\n\r\n#### Remediation action:\r\n\r\nFollow the guide below to configure Entra ID Protection to send a regularly monitored security mailbox email notification when user accounts are determined to be high risk.\r\n\r\n- [Configure Entra Identity Protection Notifications - Microsoft Learn](https://learn.microsoft.com/entra/id-protection/howto-identity-protection-configure-notifications#configure-users-at-risk-detected-alerts)\r\n\r\n#### Related links\r\n\r\n- [CISA Risk Based Policies - MS.AAD.2.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad22v1)\r\n- [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L122)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Your tenant has one or more recipients for notifications of risky user logins:\n\n  - [Sander Rozemuller](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/~/UsersAtRiskAlerts/fromNav/Identity)\n  - [Sander Rozemuller](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/IdentityProtectionMenuBlade/~/UsersAtRiskAlerts/fromNav/Identity)\n\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.2.3: Sign-ins detected as high risk SHALL be blocked.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.2.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaBlockHighRiskSignIn | Should -Be $true -Because \"an enabled policy for all users blocking high risk sign-ins shall exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled policy for all users blocking high risk sign-ins shall exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled policy for all users blocking high risk sign-ins shall exist., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaBlockHighRiskSignIn | Should -Be $true -Because \"an enabled policy for all users blocking high risk sign-ins shall exist.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaBlockHighRiskSignIns.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Sign-ins detected as high risk SHALL be blocked.\r\n\r\nRationale: Blocking high-risk sign ins may prevent compromised sign-ins from accessing the tenant. This prevents compromised sign-ins from accessing the tenant.\r\n\r\n#### Remediation action:\r\n\r\nCreate a Conditional Access policy blocking sign-ins determined high risk by the Identity Protection service. Configure the following policy settings in the new Conditional Access policy as per the values below:\r\n\r\n* Users > Include > **All users**\r\n* Target resources > Cloud apps > **All cloud apps**\r\n* Conditions > Sign-in risk > **High**\r\n* Access controls > Grant > **Block Access**\r\n\r\n#### Related links\r\n\r\n* [CISA Risk Based Policies - MS.AAD.2.3](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad23v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L138)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that block high risk sign-ins.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.1: Phishing-resistant MFA SHALL be enforced for all users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaPhishResistant | Should -Be $true -Because \"an enabled conditional access policy requires phishing-resistant MFA for all apps.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPhishResistant.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled conditional access policy requires phishing-resistant MFA for all apps., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled conditional access policy requires phishing-resistant MFA for all apps., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPhishResistant.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaPhishResistant | Should -Be $true -Because \"an enabled conditional access policy requires phishing-resistant MFA for all apps.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPhishResistant.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Phishing-resistant MFA SHALL be enforced for all users.\r\n\r\nRationale: Weaker forms of MFA do not protect against sophisticated phishing attacks. By enforcing methods resistant to phishing, those risks are minimized.\r\n\r\n#### Remediation action:\r\n\r\nCreate a conditional access policy enforcing phishing-resistant MFA for all users. Configure the following policy settings in the new conditional access policy, per the values below:\r\n\r\n* Users > Include > **All users**\r\n* Target resources > Cloud apps > **All cloud apps**\r\n* Access controls > Grant > Grant Access > Require authentication strength > **Phishing-resistant MFA**\r\n\r\n#### Related links\r\n\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad31v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L181)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that require Phishing Resistant Authentication Strengths.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.2: If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaMfa | Should -Be $true -Because \"an enabled conditional access policy requires MFA for all apps.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaMfa.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "If phishing-resistant MFA has not been enforced, an alternative MFA method SHALL be enforced for all users.\r\n\r\nRationale: This is a stopgap security policy to help protect the tenant if phishing-resistant MFA has not been enforced. This policy requires MFA enforcement, thus reducing single-form authentication risk.\r\n\r\n#### Remediation action:\r\n\r\nIf phishing-resistant MFA has not been enforced for all users yet, create a conditional access policy that enforces MFA but does not dictate MFA method. Configure the following policy settings in the new conditional access policy, per the values below:\r\n\r\n* Users > Include > **All users**\r\n* Target resources > Cloud apps > **All cloud apps**\r\n* Access controls > Grant > Grant Access > **Require multifactor authentication**\r\n\r\n#### Related links\r\n\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad32v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L214)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Your tenant has one or more policies that require MFA:\n\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1)\n\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.3: If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaAuthenticatorContext | Should -Be $true -Because \"Microsoft Authenticator is configured to show login context information.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAuthenticatorContext.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "If phishing-resistant MFA has not been enforced and Microsoft Authenticator is enabled, it SHALL be configured to show login context information.\r\n\r\nRationale: This stopgap security policy helps protect the tenant when phishing-resistant MFA has not been enforced and Microsoft Authenticator is used. This policy helps improve the security of Microsoft Authenticator by showing user context information, which helps reduce MFA phishing compromises.\r\n\r\n#### Remediation action:\r\n\r\nIf phishing-resistant MFA has not been deployed yet and Microsoft Authenticator is in use, configure Authenticator to display context information to users when they log in.\r\n\r\n1. In Azure Active Directory, click Security > Authentication methods > **Microsoft Authenticator**.\r\n2. Click the **Configure tab**.\r\n3. For Allow use of Microsoft Authenticator OTP select **No**.\r\n4. Under Show application name in push and passwordless notifications select Status > **Enabled** and Target > Include > **All users**.\r\n5. Under Show geographic location in push and passwordless notifications select Status > **Enabled** and Target > Include > **All users**.\r\n6. Select **Save**.\r\n\r\n#### Related links\r\n\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad33v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L254)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Your tenant has the Authentication Methods policy for Microsoft Authenticator set appropriately:\n\n  - [](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods)\n\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.4: The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaMethodsMigration | Should -Be $true -Because \"the migration to Authentication Methods is complete.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaMethodsMigration.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the migration to Authentication Methods is complete., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the migration to Authentication Methods is complete., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaMethodsMigration.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaMethodsMigration | Should -Be $true -Because \"the migration to Authentication Methods is complete.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaMethodsMigration.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "The Authentication Methods Manage Migration feature SHALL be set to Migration Complete.\r\n\r\nRationale: To disable the legacy authentication methods screen for the tenant, configure the Manage Migration feature to Migration Complete. The MFA and Self-Service Password Reset (SSPR) authentication methods are both managed from a central admin page, thereby reducing administrative complexity and potential security misconfigurations.\r\n\r\n#### Remediation action:\r\n\r\nIf phishing-resistant MFA has not been enforced for all users yet, create a conditional access policy that enforces MFA but does not dictate MFA method. Configure the following policy settings in the new conditional access policy, per the values below:\r\n\r\n1. Go through the process of [migrating from the legacy Azure AD MFA and Self-Service Password Reset (SSPR) administration pages to the new unified Authentication Methods policy page](https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-authentication-methods-manage).\r\n2. Once ready to finish the migration, [set the **Manage Migration** option to **Migration Complete**](https://learn.microsoft.com/en-us/entra/identity/authentication/how-to-authentication-methods-manage#finish-the-migration).\r\n\r\n#### Related links\r\n\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad34v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L284)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant has not completed the migration to Authentication Methods.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.5: The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.5",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n\r\n        $isMethodsMigrationComplete = Test-MtCisaMethodsMigration\r\n\r\n        $isWeakFactorDisabled = Test-MtCisaWeakFactor\r\n\r\n        $isWeakFactorDisabled -and $isMethodsMigrationComplete | Should -Be $true -Because \"all weak authentication methods are disabled.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaWeakFactor.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because all weak authentication methods are disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because all weak authentication methods are disabled., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaWeakFactor.Tests.ps1",
            "Line": "12",
            "LineText": "        $isWeakFactorDisabled -and $isMethodsMigrationComplete | Should -Be $true -Because \"all weak authentication methods are disabled.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaWeakFactor.Tests.ps1: line 12\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "The authentication methods SMS, Voice Call, and Email One-Time Passcode (OTP) SHALL be disabled.\r\n\r\nRationale: SMS, voice call, and email OTP are the weakest authenticators. This policy forces users to use stronger MFA methods.\r\n\r\n#### Remediation action:\r\n\r\nIf phishing-resistant MFA has not been deployed yet and Microsoft Authenticator is in use, configure Authenticator to display context information to users when they log in.\r\n\r\n1. In **Azure Active Directory**, click **Security** > **[Authentication methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity)**\r\n2. Click on the **SMS**, **Voice Call**, and **Email OTP** authentication methods and disable each of them. Their statuses should be **Enabled** > **No** on the **Authentication methods** > **Policies** page.\r\n\r\n#### Related links\r\n\r\n* [Entra admin portal - Authentication methods](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods/fromNav/Identity)\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.5v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad35v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L307)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nOne or more weak methods are enabled in your tenant.\n\n| Authentication Method | State | Test Result |\n| --- | --- | --- |\n| [Sms](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | disabled | ✅ Pass |\n| [Voice](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | disabled | ✅ Pass |\n| [Email](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/AdminAuthMethods) | enabled | ❌ Fail |\n\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.6: Phishing-resistant MFA SHALL be required for highly privileged roles.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.6",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaPrivilegedPhishResistant | Should -Be $true -Because \"an enabled conditional access policy for highly privileged roles should require phishing resistant MFA.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because an enabled conditional access policy for highly privileged roles should require phishing resistant MFA., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because an enabled conditional access policy for highly privileged roles should require phishing resistant MFA., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaPrivilegedPhishResistant | Should -Be $true -Because \"an enabled conditional access policy for highly privileged roles should require phishing resistant MFA.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPrivilegedPhishResistant.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Phishing-resistant MFA SHALL be required for highly privileged roles.\r\n\r\nRationale: This is a backup security policy to help protect privileged access to the tenant if the conditional access policy, which requires MFA for all users, is disabled or misconfigured.\r\n\r\n#### Remediation action:\r\n\r\nCreate a conditional access policy enforcing phishing-resistant MFA for highly privileged roles. Configure the following policy settings in the new conditional access policy, per the values below:\r\n\r\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\r\n2. Click on **New policy**\r\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\r\n    * Users > Include > Select users and groups > Directory roles > select each of the roles listed in the **[Highly Privileged Roles](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#highly-privileged-roles)** listed.\r\n    * Target resources > Cloud apps > **All cloud apps**\r\n    * Access controls > Grant > Grant Access > Require authentication strength > **Phishing-resistant MFA**\r\n4. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.6v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad36v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L354)\r\n* [CISA ScubaGear Highly Privileged Roles](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#highly-privileged-roles)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that require phishing resistant MFA for highly privileged users.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.7: Managed devices SHOULD be required for authentication.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.7",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        $result = Test-MtCisaManagedDevice\r\n        if($result){\r\n            $result | Should -Be $true -Because \"a policy requires compliant or domain joined devices.\"\r\n        }else{\r\n            Test-MtCisaManagedDevice -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDevice.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because a policy requires compliant devices., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because a policy requires compliant devices., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDevice.Tests.ps1",
            "Line": "11",
            "LineText": "            Test-MtCisaManagedDevice -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDevice.Tests.ps1: line 11\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Managed devices SHOULD be required for authentication.\r\n\r\nRationale: The security risk of an adversary authenticating to the tenant from their own device is reduced by requiring a managed device to authenticate. Managed devices are under the provisioning and control of the agency. [OMB-22-09](https://www.whitehouse.gov/wp-content/uploads/2022/01/M-22-09.pdf) states, \"When authorizing users to access resources, agencies must consider at least one device-level signal alongside identity information about the authenticated user.\"\r\n\r\n#### Remediation action:\r\n\r\nCreate a conditional access policy requiring a user's device to be either Microsoft Entra hybrid joined or compliant during authentication. Configure the following policy settings in the new conditional access policy, per the values below:\r\n\r\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\r\n2. Click on **New policy**\r\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\r\n    * Users > Include > **All users**\r\n    * Target resources > Cloud apps > **All cloud apps**\r\n    * Access controls > Grant > Grant Access > **Require device to be marked as compliant** and **Require Microsoft Entra hybrid joined device** > For multiple controls > **Require one of the selected controls**\r\n4. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.7v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad37v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L397)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that require managed devices.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.3.8: Managed Devices SHOULD be required to register MFA.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.3.8",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        $result = Test-MtCisaManagedDeviceRegistration\r\n        if($result){\r\n            $result | Should -Be $true -Because \"a policy requires compliant or domain joined devices for registration.\"\r\n        }else{\r\n            Test-MtCisaManagedDeviceRegistration -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices for registration.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because a policy requires compliant devices for registration., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because a policy requires compliant devices for registration., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1",
            "Line": "11",
            "LineText": "            Test-MtCisaManagedDeviceRegistration -SkipHybridJoinCheck | Should -Be $true -Because \"a policy requires compliant devices for registration.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaManagedDeviceRegistration.Tests.ps1: line 11\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Managed Devices SHOULD be required to register MFA.\r\n\r\nRationale: Reduce risk of an adversary using stolen user credentials and then registering their own MFA device to access the tenant by requiring a managed device provisioned and controlled by the agency to perform registration actions. This prevents the adversary from using their own unmanaged device to perform the registration.\r\n\r\n#### Remediation action:\r\n\r\nCreate a conditional access policy requiring a user to be on a managed device when registering for MFA.\r\n\r\n1. In **Entra** under **Protection** and **Conditional Access**, select **[Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)**.\r\n2. Click on **New policy**\r\n3. Under **New Conditional Access policy**, configure the following policy settings in the new conditional access policy, per the values below:\r\n    * Users > Include > **All users**\r\n    * Target resources > User actions > **Register security information**\r\n    * Access controls > Grant > Grant Access > **Require device to be marked as compliant** and **Require Microsoft Entra hybrid joined device** > For multiple controls > **Require one of the selected controls**\r\n4. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Conditional Access | Policies](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies/fromNav/)\r\n* [CISA Strong Authentication & Secure Registration - MS.AAD.3.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad38v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L431)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have any conditional access policies that require managed devices for registration.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.5.1: Only administrators SHALL be allowed to register applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaAppRegistration | Should -Be $true -Because \"default user authorization policy prevents app creation.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppRegistration.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Only administrators SHALL be allowed to register applications.\r\n\r\nRationale: Application access for the tenant presents a heightened security risk compared to interactive user access because applications are typically not subject to critical security protections, such as MFA policies. Reduce risk of unauthorized users installing malicious applications into the tenant by ensuring that only specific privileged users can register applications.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra**, under **Identity** and **Users**, select **[User settings](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)**.\r\n2. For **Users can register applications**, select **No**.\r\n3. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - User settings](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)\r\n* [CISA Application Registration & Consent - MS.AAD.5.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad51v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L542)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. **[Users can register applications](https://entra.microsoft.com/#view/Microsoft_AAD_UsersAndTenants/UserManagementMenuBlade/~/UserSettings/menuId/UserSettings)** is set to **No** in your tenant.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.5.2: Only administrators SHALL be allowed to consent to applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaAppUserConsent | Should -Be $true -Because \"default user authorization policy prevents app consent.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppUserConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because default user authorization policy prevents app consent., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because default user authorization policy prevents app consent., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppUserConsent.Tests.ps1",
            "Line": "3",
            "LineText": "        Test-MtCisaAppUserConsent | Should -Be $true -Because \"default user authorization policy prevents app consent.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppUserConsent.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Only administrators SHALL be allowed to consent to applications.\r\n\r\nRationale: Limiting applications consent to only specific privileged users reduces risk of users giving insecure applications access to their data via [consent grant attacks](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/detect-and-remediate-illicit-consent-grants?view=o365-worldwide).\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\r\n2. Under **Security**, select **Consent and permissions**.\r\n3. Under **Manage**, select **[User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)**.\r\n4. Under **User consent for applications**, select **Do not allow user consent**.\r\n5. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Consent and permissions | User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\r\n* [CISA Application Registration & Consent - MS.AAD.5.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad52v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L575)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant [allows users to consent for applications](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings). The recommended setting is **Do not allow user consent**.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.5.3: An admin consent workflow SHALL be configured for applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaAppAdminConsent | Should -Be $true -Because \"admin consent policy is configured with reviewers.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppAdminConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because admin consent policy is configured with reviewers., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because admin consent policy is configured with reviewers., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppAdminConsent.Tests.ps1",
            "Line": "3",
            "LineText": "        Test-MtCisaAppAdminConsent | Should -Be $true -Because \"admin consent policy is configured with reviewers.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppAdminConsent.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "An admin consent workflow SHALL be configured for applications.\r\n\r\nRationale: Configuring an admin consent workflow reduces the risk of the previous policy by setting up a process for users to securely request access to applications necessary for business purposes. Administrators have the opportunity to review the permissions requested by new applications and approve or deny access based on a risk assessment.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra** create a new **Group** that contains admin users responsible for reviewing and adjudicating application consent requests. Group members will be notified when users request consent for new applications.\r\n2. Then in **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\r\n3. Under **Security**, select **Consent and permissions**.\r\n3. Under **Manage**, select **[Admin consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)**.\r\n5. Under **Admin consent requests** and **Users can request admin consent to apps they are unable to consent to** select **Yes**.\r\n6. Under **Who can review admin consent requests**, select **+ Add groups** and select the **group** responsible for reviewing and adjudicating app requests **(created in step one above)**.\r\n7. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Consent and permissions | Admin consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/AdminConsentSettings)\r\n* [CISA Application Registration & Consent - MS.AAD.5.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad53v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L613)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant admin consent request policy is not configured.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.5.4: Group owners SHALL NOT be allowed to consent to applications.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.5.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaAppGroupOwnerConsent | Should -Be $true -Because \"group owner consent is disabled.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppGroupOwnerConsent.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because group owner consent is disabled., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because group owner consent is disabled., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppGroupOwnerConsent.Tests.ps1",
            "Line": "3",
            "LineText": "        Test-MtCisaAppGroupOwnerConsent | Should -Be $true -Because \"group owner consent is disabled.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAppGroupOwnerConsent.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Group owners SHALL NOT be allowed to consent to applications.\r\n\r\nRationale: In M365, group owners and team owners can consent to applications accessing data in the tenant. By requiring consent requests to go through an approval workflow, risk of exposure to malicious applications is reduced.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra** under **Identity** and **Applications**, select **Enterprise applications**.\r\n2. Under **Security**, select **Consent and permissions**.\r\n3. Under **Manage**, select **[User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)**.\r\n4. Under **Group owner consent for apps accessing data**, select **Do not allow group owner consent**.\r\n5. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Consent and permissions | User consent settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/~/UserSettings)\r\n* [CISA Application Registration & Consent - MS.AAD.5.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad54v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L665)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant allows group owners to consent to applications.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.6.1: User passwords SHALL NOT expire.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.6.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaPasswordExpiration | Should -Be $true -Because \"at least 1 domain has an password expiration policy of 100 years or more.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPasswordExpiration.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because at least 1 domain has an password expiration policy of 100 years or more., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because at least 1 domain has an password expiration policy of 100 years or more., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPasswordExpiration.Tests.ps1",
            "Line": "3",
            "LineText": "        Test-MtCisaPasswordExpiration | Should -Be $true -Because \"at least 1 domain has an password expiration policy of 100 years or more.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPasswordExpiration.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "User passwords SHALL NOT expire.\r\n\r\nThe National Institute of Standards and Technology (NIST), OMB, and Microsoft have published guidance indicating mandated periodic password changes make user accounts less secure. For example, OMB-22-09 states, \"Password policies must not require use of special characters or regular rotation.\"\r\n\r\n#### Remediation action:\r\n\r\nConfigure password policies to set passwords to never expire.\r\n1. In **[Microsoft 365 admin center](https://admin.cloud.microsoft/)** under **Settings** and **Org settings**, select the tab **Security & privacy**.\r\n2. Under **[Password expiration policy](https://admin.cloud.microsoft/?#/Settings/SecurityPrivacy/:/Settings/L1/PasswordPolicy)**, set **Set passwords to never expire**.\r\n3. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Microsoft 365 admin center - Org settings | Password expiration policy](https://admin.cloud.microsoft/?#/Settings/SecurityPrivacy/:/Settings/L1/PasswordPolicy)\r\n* [Configure the **Password expiration policy** ](https://learn.microsoft.com/en-us/microsoft-365/admin/manage/set-password-expiration-policy?view=o365-worldwide#set-password-expiration-policy)\r\n* [CISA Passwords - MS.AAD.6.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad61v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L723)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have password expiration set to never expire.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.4: Permanent active role assignments SHALL NOT be allowed for highly privileged roles.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.4",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaPermanentRoleAssignment | Should -Be $true -Because \"no permanently active privileged role assignments exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because no permanently active privileged role assignments exist., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because no permanently active privileged role assignments exist., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaPermanentRoleAssignment | Should -Be $true -Because \"no permanently active privileged role assignments exist.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaPermanentRoleAssignment.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Permanent active role assignments SHALL NOT be allowed for highly privileged roles.\r\n\r\nRationale: Instead of giving users permanent assignments to privileged roles, provisioning access just in time lessens exposure if those accounts become compromised. In Azure AD PIM or an alternative PAM system, just in time access can be provisioned by assigning users to roles as eligible instead of perpetually active.\r\n\r\nNote: Exceptions to this policy are:\r\n* **Emergency access** accounts that need **perpetual access** to the tenant in the rare event of system degradation or other scenarios.\r\n* Some types of **service accounts** that require a user account with privileged roles; since these accounts are used by software programs, they **cannot** perform role activation.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Show more** and **Roles & adminis** and then **[All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)**.\r\n\r\n    Perform the steps below for each highly privileged role. We reference the Global Administrator role as an example.\r\n\r\n2. Select the **Global administrator** role.\r\n3. Under **Manage**, select **Assignments** and click the **Active assignments** tab.\r\n4. Verify there are no users or groups with a value of **Permanent** in the **End time** column. If there are any, recreate those assignments to have an expiration date using Entra ID PIM or an alternative PAM system. If a group is identified and it is enrolled in PIM for Groups, see the exception cases below for details.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)\r\n* [CISA 7.4 Highly Privileged User Access - MS.AAD.7.4v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad74v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L856)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant has active assignments without expiration to privileged roles.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.5: Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.5",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaUnmanagedRoleAssignment | Should -Be $true -Because \"no unmanaged active role assignments exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaUnmanagedRoleAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Provisioning users to highly privileged roles SHALL NOT occur outside of a PAM system.\r\n\r\nRationale: Provisioning users to privileged roles within a PAM system enables enforcement of numerous privileged access policies and monitoring. If privileged users are assigned directly to roles in the M365 admin center or via PowerShell outside of the context of a PAM system, a significant set of critical security capabilities are bypassed.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Show more** > **Roles & admins** and then select **[All roles](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/RolesManagementMenuBlade/~/AllRoles)**.\r\n\r\n    Perform the steps below for each highly privileged role. We reference the **Global Administrator** role as an example.\r\n\r\n2. Select the **Global administrator** role.\r\n3. Under **Manage**, select **Assignments** and click the **Active assignments** tab.\r\n4. For each user or group listed, examine the value in the Start time column. If it contains a value of -, this indicates the respective user/group was assigned to that role outside of Entra ID PIM. If the role was assigned outside of Entra ID PIM, delete the assignment and recreate it using Entra ID PIM.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Roles and administrators | All roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\r\n* [CISA 7.5 Highly Privileged User Access - MS.AAD.7.5v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad75v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L907)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Your tenant has no unmanaged active role assignments.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.6:     Activation of the Global Administrator role SHALL require approval.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.6",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaRequireActivationApproval | Should -Be $true -Because \"the Global Administrator role requires approval for activation.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaRequireActivationApproval.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because the Global Administrator role requires approval for activation., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because the Global Administrator role requires approval for activation., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaRequireActivationApproval.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaRequireActivationApproval | Should -Be $true -Because \"the Global Administrator role requires approval for activation.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaRequireActivationApproval.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Activation of the Global Administrator role SHALL require approval.\r\n\r\nRationale: Requiring approval for a user to activate Global Administrator, which provides unfettered access, makes it more challenging for an attacker to compromise the tenant with stolen credentials and it provides visibility of activities indicating a compromise is taking place.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\r\n2. Under **Manage**, select **Microsoft Entra roles**.\r\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\r\n4. Select the **Global Administrator** role in the list.\r\n5. Click **Settings**.\r\n6. Click **Edit**.\r\n7. Select the **Require approval to activate** option.\r\n8. Click **Update**.\r\n9. Review the list of groups that are actively assigned to the **Global Administrator** role. If any of the groups are enrolled in PIM for Groups, then also apply the same configurations under step 2 above to each PIM group's Member settings.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\r\n* [CISA 7.6 Highly Privileged User Access - MS.AAD.7.6v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad76v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L938)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant has active assignments without a start date.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.7: Eligible and Active highly privileged role assignments SHALL trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.7",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaAssignmentNotification | Should -Be $true -Because \"highly privileged roles are set to notify on assignment.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAssignmentNotification.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because highly privileged roles are set to notify on assignment., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because highly privileged roles are set to notify on assignment., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAssignmentNotification.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaAssignmentNotification | Should -Be $true -Because \"highly privileged roles are set to notify on assignment.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaAssignmentNotification.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Eligible and Active highly privileged role assignments SHALL trigger an alert.\r\n\r\nRationale: Closely monitor assignment of the highest privileged roles for signs of compromise. Send assignment alerts to enable the security monitoring team to detect compromise attempts.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\r\n2. Under **Manage**, select **Microsoft Entra roles**.\r\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\r\n\r\n    Perform the steps below for each highly privileged role. We reference the Global Administrator role as an example.\r\n\r\n4. Click the **Global Administrator** role.\r\n5. Click **Settings** and then click **Edit**.\r\n6. Click the **Notifications** tab.\r\n7. Under **Send notifications when members are assigned as eligible to this role**, in the **Role assignment alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive privileged role assignment alerts.\r\n8. Under **Send notifications when members are assigned as active to this role**, in the **Role assignment alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive privileged role assignment alerts.\r\n9. Click **Update**.\r\n10. For each of the highly privileged roles, if they have any PIM groups actively assigned to them, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\r\n* [CISA 7.7 Highly Privileged User Access - MS.AAD.7.7v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad77v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L974)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant has highly privileged roles without notifications.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.8: User activation of the Global Administrator role SHALL trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.8",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaActivationNotification -GlobalAdminOnly | Should -Be $true -Because \"notifications are set for activation of the Global Admin role.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because notifications are set for activation of the Global Admin role., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because notifications are set for activation of the Global Admin role., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaActivationNotification -GlobalAdminOnly | Should -Be $true -Because \"notifications are set for activation of the Global Admin role.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationGlobalAdmin.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "User activation of the Global Administrator role SHALL trigger an alert.\r\n\r\nRationale: Closely monitor activation of the Global Administrator role for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts.\r\n\r\nUser activation of other highly privileged roles SHOULD trigger an alert.\r\n\r\nRationale: Closely monitor activation of high-risk roles for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts. In some environments, activating privileged roles can generate a significant number of alerts.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\r\n2. Under **Manage**, select **Microsoft Entra roles**.\r\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\r\n4. Search and click the **Global Administrator** role.\r\n\r\n    For each of the highly privileged roles (other than Global Administrator), follow the same steps but enter a security monitoring mailbox different from the one used to monitor Global Administrator activations.\r\n\r\n5. Click **Settings** and then click **Edit**.\r\n6. Click the **Notifications** tab.\r\n7. Under **Send notifications when eligible members activate this role**, in the **Role activation alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive role activation alerts.\r\n8. Click **Update**.\r\n9. If the role has any PIM groups actively assigned to it, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\r\n* [CISA 7.8 Highly Privileged User Access - MS.AAD.7.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1022)\r\n* [CISA 7.9 Highly Privileged User Access - MS.AAD.7.9v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1057)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have notifications on role activations.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.7.9: User activation of other highly privileged roles SHOULD trigger an alert.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.9",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaActivationNotification -GlobalAdminOnly | Should -Be $true -Because \"notifications are set for activation of highly privileged roles.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationOther.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because notifications are set for activation of highly privileged roles., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because notifications are set for activation of highly privileged roles., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationOther.Tests.ps1",
            "Line": "7",
            "LineText": "        Test-MtCisaActivationNotification -GlobalAdminOnly | Should -Be $true -Because \"notifications are set for activation of highly privileged roles.\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaActivationNotificationOther.Tests.ps1: line 7\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "User activation of the Global Administrator role SHALL trigger an alert.\r\n\r\nRationale: Closely monitor activation of the Global Administrator role for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts.\r\n\r\nUser activation of other highly privileged roles SHOULD trigger an alert.\r\n\r\nRationale: Closely monitor activation of high-risk roles for signs of compromise. Send activation alerts to enable the security monitoring team to detect compromise attempts. In some environments, activating privileged roles can generate a significant number of alerts.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra admin center** select **Identity governance** and **Privileged Identity Management**.\r\n2. Under **Manage**, select **Microsoft Entra roles**.\r\n3. Under **Manage**, select **[Roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)**.\r\n4. Search and click the **Global Administrator** role.\r\n\r\n    For each of the highly privileged roles (other than Global Administrator), follow the same steps but enter a security monitoring mailbox different from the one used to monitor Global Administrator activations.\r\n\r\n5. Click **Settings** and then click **Edit**.\r\n6. Click the **Notifications** tab.\r\n7. Under **Send notifications when eligible members activate this role**, in the **Role activation alert** > **Additional recipients** textbox, enter the email address of the security monitoring mailbox configured to receive role activation alerts.\r\n8. Click **Update**.\r\n9. If the role has any PIM groups actively assigned to it, then also apply the same configurations per the steps above to each PIM group's **Member** settings.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - Privileged Identity Management | Microsoft Entra roles](https://entra.microsoft.com/#view/Microsoft_Azure_PIMCommon/ResourceMenuBlade/~/roles/resourceId//resourceType/tenant/provider/aadroles)\r\n* [CISA 7.8 Highly Privileged User Access - MS.AAD.7.8v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1022)\r\n* [CISA 7.9 Highly Privileged User Access - MS.AAD.7.9v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad78v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1057)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nYour tenant does not have notifications on role activations.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.8.1: Guest users SHOULD have limited or restricted access to Azure AD directory objects.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaGuestUserAccess | Should -Be $true -Because \"guest users have appropriate role.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaGuestUserAccess.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Guest users SHOULD have limited or restricted access to Azure AD directory objects.\r\n\r\nRationale: Limiting the amount of object information available to guest users in the tenant, reduces malicious reconnaissance exposure, should a guest account become compromised or be created by an adversary.\r\n\r\n#### Remediation action\r\n\r\n1. In **Entra ID** and **External Identities**, select **[External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)**.\r\n2. Under **Guest user access**, select either **Guest users have limited access to properties and memberships of directory objects** or **Guest user access is restricted to properties and memberships of their own directory objects (most restrictive)**.\r\n3. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - External Identities | External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)\r\n* [CISA Guest User Access - MS.AAD.8.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad81v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1100)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Guest users have limited access to properties and memberships of directory objects\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.8.2: Only users with the Guest Inviter role SHOULD be able to invite guest users.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCisaGuestInvitation | Should -Be $true -Because \"guest invitations are restricted to admins.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaGuestInvitation.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Only users with the Guest Inviter role SHOULD be able to invite guest users.\r\n\r\nRationale: By only allowing an authorized group of individuals to invite external users to create accounts in the tenant, an agency can enforce a guest user account approval process, reducing the risk of unauthorized account creation.\r\n\r\n#### Remediation action:\r\n\r\n1. In **Entra ID** and **External Identities**, select **[External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)**.\r\n2. Under **Guest invite settings**, select **Only users assigned to specific admin roles can invite guest users**.\r\n3. Click **Save**.\r\n\r\n#### Related links\r\n\r\n* [Entra admin center - External Identities | External collaboration settings](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/CompanyRelationshipsMenuBlade/~/Settings/menuId/Settings)\r\n* [CISA Guest User Access - MS.AAD.8.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/aad.md#msaad82v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/AADConfig.rego#L1157)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nWell done. Your tenant restricts who can invite guests:\n\n%TestResult%\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MS.AAD.8.3: Guest invites SHOULD only be allowed to specific external domains that have been authorized by the agency for legitimate business purposes.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.8.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCisaCrossTenantInboundDefault -GlobalAdminOnly | Should -Be $true -Because \"default inbound cross-tenant access policy is set to block.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "Message": "A parameter cannot be found that matches parameter name 'GlobalAdminOnly'.",
            "ParameterName": "GlobalAdminOnly",
            "ParameterType": null,
            "TypeSpecified": null,
            "ErrorId": "NamedParameterNotFound",
            "Line": 3,
            "Offset": 46,
            "CommandInvocation": "System.Management.Automation.InvocationInfo",
            "ErrorRecord": "A parameter cannot be found that matches parameter name 'GlobalAdminOnly'.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at <ScriptBlock>(Closure, FunctionContext)"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 5,
            "Activity": "Test-MtCisaCrossTenantInboundDefault",
            "Reason": "ParameterBindingException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "NamedParameterNotFound,Test-MtCisaCrossTenantInboundDefault",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "Test-MtCisaCrossTenantInboundDefault",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 3,
            "OffsetInLine": 46,
            "HistoryId": 43,
            "ScriptName": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1",
            "Line": "        Test-MtCisaCrossTenantInboundDefault -GlobalAdminOnly | Should -Be $true -Because \"default inbound cross-tenant access policy is set to block.\"\r\n",
            "PositionMessage": "At /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1:3 char:46\n+         Test-MtCisaCrossTenantInboundDefault -GlobalAdminOnly | Shoul …\n+                                              ~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra",
            "PSCommandPath": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCrossTenantInboundDefault.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MS.EXO.2.1: A list of approved IP addresses for sending mail SHALL be maintained.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.2.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        $cisaSpfRestriction = Test-MtCisaSpfRestriction\r\n\r\n        if ($null -ne $cisaSpfRestriction) {\r\n            $cisaSpfRestriction | Should -Be $true -Because \"SPF record should restrict authorized senders.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfRestriction.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "The term 'Test-MtCisaSpfRestriction' is not recognized as a name of a cmdlet, function, script file, or executable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "CommandName": "Test-MtCisaSpfRestriction",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "The term 'Test-MtCisaSpfRestriction' is not recognized as a name of a cmdlet, function, script file, or executable program.\nCheck the spelling of the name, or if a path was included, verify that the path is correct and try again.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at <ScriptBlock>(Closure, FunctionContext)"
          },
          "TargetObject": "Test-MtCisaSpfRestriction",
          "CategoryInfo": {
            "Category": 13,
            "Activity": "",
            "Reason": "CommandNotFoundException",
            "TargetName": "Test-MtCisaSpfRestriction",
            "TargetType": "String"
          },
          "FullyQualifiedErrorId": "CommandNotFoundException",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 3,
            "OffsetInLine": 31,
            "HistoryId": 43,
            "ScriptName": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfRestriction.Tests.ps1",
            "Line": "        $cisaSpfRestriction = Test-MtCisaSpfRestriction\r\n",
            "PositionMessage": "At /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfRestriction.Tests.ps1:3 char:31\n+         $cisaSpfRestriction = Test-MtCisaSpfRestriction\n+                               ~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange",
            "PSCommandPath": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfRestriction.Tests.ps1",
            "InvocationName": "Test-MtCisaSpfRestriction",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfRestriction.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MT.1001: At least one Conditional Access policy is configured with device compliance.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1001",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaDeviceComplianceExists | Should -Be $true -Because \"there is no policy which requires device compliances\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy which requires device compliances, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy which requires device compliances, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "3",
            "LineText": "        Test-MtCaDeviceComplianceExists | Should -Be $true -Because \"there is no policy which requires device compliances\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nIt is recommended to have at least one conditional access policy that enforces the use of a compliant device.\r\n\r\nSee [Require a compliant device, Microsoft Entra hybrid joined device, or MFA - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-compliant-device)",
        "SkippedReason": null,
        "TestResult": "There was no conditional access policy requiring device compliance.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1003: At least one Conditional Access policy is configured with All Apps.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1003",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaAllAppsExists -SkipCheckAllUsers | Should -Be $true -Because \"there is no policy scoped to All Apps\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\n  Microsoft recommends creating at least one conditional access policy targetting all cloud apps and ideally all users.\r\n\r\n  See [Plan a Conditional Access deployment - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/plan-conditional-access#apply-conditional-access-policies-to-every-app)",
        "SkippedReason": null,
        "TestResult": "These conditional access policies target all cloud apps:\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA001: Require strong multifactor authentication for admins](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/233fb2a5-0150-4773-9907-4bbeb5fb1f8d?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA002: Block break-glass logins from untrusted locations](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/3d64b222-c73c-46d9-9d1e-9e694dd47090?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1004: At least one Conditional Access policy is configured with All Apps and All Users.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1004",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaAllAppsExists | Should -Be $true -Because \"there is no policy scoped to All Apps and All Users\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\n  Microsoft recommends creating at least one conditional access policy targetting all cloud apps and ideally all users.\r\n\r\n  See [Plan a Conditional Access deployment - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/plan-conditional-access#apply-conditional-access-policies-to-every-app)",
        "SkippedReason": null,
        "TestResult": "These conditional access policies target all cloud apps and all users:\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1005: All Conditional Access policies are configured to exclude at least one emergency/break glass account or group.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1005",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaEmergencyAccessExists | Should -Be $true -Because \"there is no emergency access account or group present in all enabled policies\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no emergency access account or group present in all enabled policies, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no emergency access account or group present in all enabled policies, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "12",
            "LineText": "        Test-MtCaEmergencyAccessExists | Should -Be $true -Because \"there is no emergency access account or group present in all enabled policies\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 12\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "It is recommended to have at least one emergency/break glass account or account group excluded from all conditional access policies.\r\nThis allows for emergency access to the tenant in case of a misconfiguration or other issues.\r\n\r\nSee [Manage emergency access accounts in Microsoft Entra ID - Microsoft Learn](https://learn.microsoft.com/entra/identity/role-based-access-control/security-emergency-access)\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nAutomatically detected emergency access user: Break Glass (602b7044-910a-4155-b3fd-bd36ae7d1e1a)\n\nThese conditional access policies don't have the emergency access user excluded:\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db)\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1)\n  - [Require multifactor authentication for admins](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/9352a236-204a-4d39-8cd2-3d2cfab90abc)\n  - [CA002: Block break-glass logins from untrusted locations](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/3d64b222-c73c-46d9-9d1e-9e694dd47090)\n  - [CA003: Sign-in every hour for admin accounts](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/c82cb178-c650-4446-9885-7e5fa10d982a)\n  - [CA004: Require password change for medium-risk admin roles](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/c77b3b63-22da-431f-b1af-6aa5b4df9528)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161)\n  - [CA103: Require approved client apps and app protection for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/0dc9bee2-ccf1-47a0-ade8-ba74fc16b2f7)\n  - [CA202: Require app protection policy with mobile devices](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/0987fc85-8c0b-4692-b0e6-2cdae88736eb)\n  - [CA203: Block Exchange ActiveSync on all devices](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/f6830f41-b4c1-457f-baaf-d4d64201742a)\n  - [CAVD001: Single Sign On AVD](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/4c08e562-f594-4d60-b843-c432b72e90e5)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1006: At least one Conditional Access policy is configured to require MFA for admins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1006",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaMfaForAdmin | Should -Be $true -Because \"there is no policy that requires MFA for admins\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "This test checks if the tenant has at least one conditional access policy requiring MFA for admins.\r\nThe following roles are considered as admin roles:\r\n\r\n- Global Administrator\r\n- Application Administrator\r\n- Authentication Administrator\r\n- Billing Administrator\r\n- Cloud Application Administrator\r\n- Conditional Access Administrator\r\n- Exchange Administrator\r\n- Helpdesk Administrator\r\n- Password Administrator\r\n- Privileged Authentication Administrator\r\n- Privileged Role Administrator\r\n- Security Administrator\r\n- SharePoint Administrator\r\n- User Administrator\r\n\r\nSee [Require MFA for administrators - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-admin-mfa)\"\r\n\r\n",
        "SkippedReason": null,
        "TestResult": "\r\n\r\nThe following conditional access policies require multi-factor authentication for admins:\n\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1)\n  - [CA001: Require strong multifactor authentication for admins](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/233fb2a5-0150-4773-9907-4bbeb5fb1f8d)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1007: At least one Conditional Access policy is configured to require MFA for all users.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1007",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaMfaForAllUsers | Should -Be $true -Because \"there is no policy that requires MFA for all users\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "This test checks if the tenant has at least one conditional access policy requiring MFA for all users.\r\n\r\nSee [Require MFA for all users - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-all-users-mfa)\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nThe following conditional access policies require multi-factor authentication for all users:\n\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1008: At least one Conditional Access policy is configured to require MFA for Azure management.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1008",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaMfaForAdminManagement | Should -Be $true -Because \"there is no policy that requires MFA for Azure management\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires MFA for Azure management, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires MFA for Azure management, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "21",
            "LineText": "        Test-MtCaMfaForAdminManagement | Should -Be $true -Because \"there is no policy that requires MFA for Azure management\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": null
    },
    {
      "Name": "MT.1009: At least one Conditional Access policy is configured to block other legacy authentication.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1009",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaBlockLegacyOtherAuthentication | Should -Be $true -Because \"there is no policy that blocks legacy authentication\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nLegacy authentication is an unsecure method to authenticate. This function checks if the tenant has at least one\r\nconditional access policy that blocks legacy authentication.\r\n\r\nSee [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy)",
        "SkippedReason": null,
        "TestResult": "These conditional access policies block legacy authentication for other clients :\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1010: At least one Conditional Access policy is configured to block legacy authentication for Exchange ActiveSync.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1010",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        Test-MtCaBlockLegacyExchangeActiveSyncAuthentication | Should -Be $true -Because \"there is no policy that blocks legacy authentication for Exchange ActiveSync\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nLegacy authentication is an unsecure method to authenticate. This function checks if the tenant has at least one\r\nconditional access policy that blocks legacy authentication.\r\n\r\nSee [Block legacy authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-block-legacy)",
        "SkippedReason": null,
        "TestResult": "These conditional access policies block legacy authentication for Exchange Active Sync:\n\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1011: At least one Conditional Access policy is configured to secure security info registration only from a trusted location.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1011",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaSecureSecurityInfoRegistration | Should -Be $true -Because \"there is no policy that secures security info registration\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that secures security info registration, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that secures security info registration, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "30",
            "LineText": "        Test-MtCaSecureSecurityInfoRegistration | Should -Be $true -Because \"there is no policy that secures security info registration\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "Checks if the tenant has at least one conditional access policy securing security info registration.\r\n\r\nSee [Securing security info registration - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-registration)\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nNo conditional access policy securing security info registration.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1012: At least one Conditional Access policy is configured to require MFA for risky sign-ins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1012",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaMfaForRiskySignIn | Should -Be $true -Because \"there is no policy that requires MFA for risky sign-ins\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires MFA for risky sign-ins, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires MFA for risky sign-ins, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "33",
            "LineText": "        Test-MtCaMfaForRiskySignIn | Should -Be $true -Because \"there is no policy that requires MFA for risky sign-ins\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 33\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "Checks if the tenant has at least one conditional access policy requiring multifactor authentication for risky sign-ins.\r\n\r\nSee [Sign-in risk-based multifactor authentication - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-risk)\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nNo conditional access policy requires multi-factor authentication for risky sign-ins.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1013: At least one Conditional Access policy is configured to require new password when user risk is high.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1013",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaRequirePasswordChangeForHighUserRisk | Should -Be $true -Because \"there is no policy that requires new password when user risk is high\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires new password when user risk is high, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires new password when user risk is high, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "36",
            "LineText": "        Test-MtCaRequirePasswordChangeForHighUserRisk | Should -Be $true -Because \"there is no policy that requires new password when user risk is high\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 36\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "Checks if the tenant has at least one conditional access policy requiring password change for high user risk.\r\n\r\nSee [User risk-based password change - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-conditional-access-policy-risk-user)\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nNo conditional access policy requires a password change for risky users.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1014: At least one Conditional Access policy is configured to require compliant or Entra hybrid joined devices for admins.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1014",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaDeviceComplianceAdminsExists | Should -Be $true -Because \"there is no policy that requires compliant or Entra hybrid joined devices for admins\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires compliant or Entra hybrid joined devices for admins, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires compliant or Entra hybrid joined devices for admins, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "39",
            "LineText": "        Test-MtCaDeviceComplianceAdminsExists | Should -Be $true -Because \"there is no policy that requires compliant or Entra hybrid joined devices for admins\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 39\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nMicrosoft recommends requiring device compliance for administrators that are members of the following roles:\r\n\r\n* Global administrator\r\n* Application administrator\r\n* Authentication Administrator\r\n* Billing administrator\r\n* Cloud application administrator\r\n* Conditional Access administrator\r\n* Exchange administrator\r\n* Helpdesk administrator\r\n* Password administrator\r\n* Privileged authentication administrator\r\n* Privileged Role Administrator\r\n* Security administrator\r\n* SharePoint administrator\r\n* User administrator\r\n\r\nSee [Require compliant or Microsoft Entra hybrid joined device for administrators - Microsoft Learn](https://aka.ms/CATemplatesAdminDevices)",
        "SkippedReason": null,
        "TestResult": "There was no conditional access policy blocking access for unknown or unsupported device platforms.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1015: At least one Conditional Access policy is configured to block access for unknown or unsupported device platforms.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1015",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaBlockUnknownOrUnsupportedDevicePlatform | Should -Be $true -Because \"there is no policy that blocks access for unknown or unsupported device platforms\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that blocks access for unknown or unsupported device platforms, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that blocks access for unknown or unsupported device platforms, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "42",
            "LineText": "        Test-MtCaBlockUnknownOrUnsupportedDevicePlatform | Should -Be $true -Because \"there is no policy that blocks access for unknown or unsupported device platforms\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 42\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nMicrosoft recommends blocking access for unknown or unsupported device platforms.\r\n\r\nSee [Block access for unknown or unsupported device platform - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-policy-unknown-unsupported-device)",
        "SkippedReason": null,
        "TestResult": "There was no conditional access policy blocking access for unknown or unsupported device platforms.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1016: At least one Conditional Access policy is configured to require MFA for guest access.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1016",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaMfaForGuest | Should -Be $true -Because \"there is no policy that requires MFA for guest access\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that requires MFA for guest access, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that requires MFA for guest access, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "45",
            "LineText": "        Test-MtCaMfaForGuest | Should -Be $true -Because \"there is no policy that requires MFA for guest access\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 45\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "This check verifies if there is at least one conditional access policy that requires multifactor authentication for all guest accounts.\r\n\r\nSee [Require multifactor authentication for guest access - Microsoft Learn](https://learn.microsoft.com/entra/identity/conditional-access/howto-policy-guest-mfa)\r\n",
        "SkippedReason": null,
        "TestResult": "\r\nNo conditional access policy requires multi-factor authentication for guest accounts.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1017: At least one Conditional Access policy is configured to enforce non persistent browser session for non-corporate devices.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1017",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaEnforceNonPersistentBrowserSession | Should -Be $true -Because \"there is no policy that enforces non persistent browser session for non-corporate devices\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enforces non persistent browser session for non-corporate devices, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enforces non persistent browser session for non-corporate devices, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "48",
            "LineText": "        Test-MtCaEnforceNonPersistentBrowserSession | Should -Be $true -Because \"there is no policy that enforces non persistent browser session for non-corporate devices\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 48\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nMicrosoft recommends disabling browser persistence for users accessing the tenant from a unmanaged device.\r\n\r\nSee [Require reauthentication and disable browser persistence - Microsoft Learn](https://aka.ms/CATemplatesBrowserSession)",
        "SkippedReason": null,
        "TestResult": "There was no conditional access policy enforcing non persistent browser session for non-corporate devices.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1018: At least one Conditional Access policy is configured to enforce sign-in frequency for non-corporate devices.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1018",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaEnforceSignInFrequency | Should -Be $true -Because \"there is no policy that enforces sign-in frequency for non-corporate devices\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enforces sign-in frequency for non-corporate devices, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enforces sign-in frequency for non-corporate devices, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "51",
            "LineText": "        Test-MtCaEnforceSignInFrequency | Should -Be $true -Because \"there is no policy that enforces sign-in frequency for non-corporate devices\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 51\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "\r\nMicrosoft recommends disabling browser persistence for users accessing the tenant from a unmanaged device.\r\n\r\nSee [Require reauthentication and disable browser persistence - Microsoft Learn](https://aka.ms/CATemplatesBrowserSession)",
        "SkippedReason": null,
        "TestResult": "There was no conditional access policy enforcing sign-in frequency for non-corporate devices.",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1019: At least one Conditional Access policy is configured to enable application enforced restrictions.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1019",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaApplicationEnforcedRestriction | Should -Be $true -Because \"there is no policy that enables application enforced restrictions\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that enables application enforced restrictions, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that enables application enforced restrictions, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "54",
            "LineText": "        Test-MtCaApplicationEnforcedRestriction | Should -Be $true -Because \"there is no policy that enables application enforced restrictions\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 54\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": null
    },
    {
      "Name": "MT.1020: All Conditional Access policies are configured to exclude directory synchronization accounts or do not scope them.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1020",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        Test-MtCaExclusionForDirectorySyncAccount | Should -Be $true -Because \"there is no policy that excludes directory synchronization accounts\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because there is no policy that excludes directory synchronization accounts, but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because there is no policy that excludes directory synchronization accounts, but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "57",
            "LineText": "        Test-MtCaExclusionForDirectorySyncAccount | Should -Be $true -Because \"there is no policy that excludes directory synchronization accounts\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 57\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Conditional Access Baseline Policies",
      "ResultDetail": {
        "TestDescription": "It is recommended to exclude directory synchronization accounts from all conditional access policies scoped to all cloud apps.",
        "SkippedReason": null,
        "TestResult": "The following conditional access policies are scoped to all users but don't exclude the directory synchronization accounts:\n\n  - [CA001: Require strong multifactor authentication for admins](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/233fb2a5-0150-4773-9907-4bbeb5fb1f8d?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA002: Block break-glass logins from untrusted locations](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/3d64b222-c73c-46d9-9d1e-9e694dd47090?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA003: Block legacy authentication](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/50b20b1b-c125-4f8c-a1fd-0c0ab95b81db?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA004: Require multifactor authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/e3ffffd1-1220-4398-a098-46420a3e4cd1?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n  - [CA102: Block legacy authentication for all users](https://entra.microsoft.com/#view/Microsoft_AAD_ConditionalAccess/PolicyBlade/policyId/2c904438-bf32-43c8-ad1a-8d46b9f6d161?%23view/Microsoft_AAD_ConditionalAccess/ConditionalAccessBlade/~/Policies?=)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1022: All users utilizing a P1 license should be licensed.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1022",
      "Tag": [],
      "Result": "Failed",
      "ScriptBlock": "\r\n            $LicenseReport = Test-MtCaLicenseUtilization -License \"P1\"\r\n            $LicenseReport.TotalLicensesUtilized | Should -BeLessOrEqual $LicenseReport.EntitledLicenseCount -Because \"this is the maximium number of user that can utilize a P1 license\"\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected the actual value to be less than or equal to 1, because this is the maximium number of user that can utilize a P1 license, but got 4.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected the actual value to be less than or equal to 1, because this is the maximium number of user that can utilize a P1 license, but got 4.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
            "Line": "62",
            "LineText": "            $LicenseReport.TotalLicensesUtilized | Should -BeLessOrEqual $LicenseReport.EntitledLicenseCount -Because \"this is the maximium number of user that can utilize a P1 license\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8020\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 62\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "License utilization",
      "ResultDetail": {
        "TestDescription": "This test checks the utilization of Entra ID P1 licenses in the tenant.",
        "SkippedReason": null,
        "TestResult": "Total users entitled for Entra ID P1: **1**\n\nTotal P1 licenses utilized: **4**",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1023: All users utilizing a P2 license should be licensed.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1023",
      "Tag": [],
      "Result": "Passed",
      "ScriptBlock": "\r\n            $LicenseReport = Test-MtCaLicenseUtilization -License \"P2\"\r\n            $LicenseReport.TotalLicensesUtilized | Should -BeLessOrEqual $LicenseReport.EntitledLicenseCount -Because \"this is the maximium number of user that can utilize a P2 license\"\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [],
      "Block": "License utilization",
      "ResultDetail": {
        "TestDescription": "This test checks the utilization of Entra ID P2 licenses in the tenant.",
        "SkippedReason": null,
        "TestResult": "Total users entitled for Entra ID P2: **1**\n\nTotal P2 licenses utilized: **0**",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Require multifactor authentication for administrative roles.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Requiring multifactor authentication (MFA) for administrative roles makes it harder for attackers to access accounts. Administrative roles have higher permissions than typical users. If any of those accounts are compromised, your entire organization is exposed. At a minimum, protect the following roles: Global administrator, Authentication administrator, Billing administrator, Conditional Access administrator, Exchange administrator, Helpdesk administrator, Security administrator, SharePoint administrator, User administrator.",
        "SkippedReason": null,
        "TestResult": "You have 3 of 5 users with administrative roles that aren’t registered and protected with MFA.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ❌ Fail | [srozemuller_gmail.com#EXT#@rozemuller.onmicrosoft.com]() | 05/25/2024 08:07:53 | \n| ❌ Fail | [breakGlass2@rozemuller.onmicrosoft.com]() | 05/25/2024 08:07:53 | \n| ❌ Fail | [sharepoint_creator@rozemuller.onmicrosoft.com]() | 05/25/2024 08:07:53 | \n\n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right MFA method for your organization in the Microsoft 365 admin center. [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore#/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-admin-mfa).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).\n\n5. Keep track of your admin’s progress of registering authentication methods by going to Microsoft Entra ID > Security > Authentication methods > User registration details (requires Microsoft Entra ID Premium P1 or P2 licenses). [Go to User registration details](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/UserRegistrationDetails).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Enable policy to block legacy authentication.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Today, most compromising sign-in attempts come from legacy authentication. Older office clients such as Office 2010 don’t support modern authentication and use legacy protocols such as IMAP, SMTP, and POP3. Legacy authentication doesn’t support multifactor authentication (MFA). Even if an MFA policy is configured in your environment, bad actors can bypass these enforcements through legacy protocols.",
        "SkippedReason": null,
        "TestResult": "You have 0 of 26 users that don’t have legacy authentication blocked. \n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right method to block legacy authentication for your organization in the Microsoft 365 admin center (part of the MFA wizard). [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore#/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-block-legacy).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Do not allow users to grant consent to unreliable applications.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "To reduce the risk of malicious applications attempting to trick users into granting them access to your organization's data, we recommend that you allow user consent only for applications that have been published by a verified publisher.",
        "SkippedReason": null,
        "TestResult": "You have no user consent policy in place.\n\n#### Remediation actions:\n\n1. Go to Microsoft Entra ID > Enterprise applications > Consent and permissions. [Go to Consent and permissions](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ConsentPoliciesMenuBlade/UserSettings).\n\n2. Select “Allow user consent for apps from verified publishers, for selected permissions (Recommended)” to follow Microsoft’s best practice. [Learn more](https://docs.microsoft.com/azure/active-directory/manage-apps/consent-and-permissions-overview).\n\n3. Configure the low-impact permissions that users are allowed to consent to. Click “Select permissions to classify as low impact”. [Learn more](https://docs.microsoft.com/azure/active-directory/manage-apps/configure-permission-classifications?tabs=azure-portal).\n\n4. Optionally, you can help your users to consent to apps that require admin consent by setting up the admin consent workflow. This step is recommended but not required to get full score. [Learn how to configure the admin consent workflow](https://docs.microsoft.com/azure/active-directory/manage-apps/configure-admin-consent-workflow).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Ensure all users can complete multifactor authentication.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Multifactor authentication (MFA) helps protect devices and data that are accessible to these users. Adding more authentication methods, such as the Microsoft Authenticator app or a phone number, increases the level of protection if one factor is compromised.",
        "SkippedReason": null,
        "TestResult": "You have 18 of 26 users that aren’t registered with MFA. \n\n#### Remediation actions:\n\n1. We provide step-by-step guidance to select and enable the right MFA method for your organization in the Microsoft 365 admin center. [Go to the Microsoft 365 MFA wizard](https://admin.microsoft.com/adminportal/home?Q=SecureScore\" \\l \"/featureexplorer/security/ConditionalAccess).\n\n2. If you would like to perform the implementation yourself, first check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n3. If you’ve invested in Microsoft Entra ID Premium P1 or P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-registration).\n\n4. If you would like to perform the implementation yourself and you’re using Microsoft Entra ID Free, turn on security defaults. Note: Security defaults and Conditional Access can’t be used side by side. [Enable security defaults](https://docs.microsoft.com/azure/active-directory/fundamentals/concept-fundamentals-security-defaults).\n\n5. Keep track of your user’s progress of registering authentication methods by going to Microsoft Entra ID > Security > Authentication methods > User registration details (requires Microsoft Entra ID Premium P1 or P2 licenses). [Go to User registration details](https://portal.azure.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/UserRegistrationDetails).\n\n6. Use registration campaign to nudge users to set up specific authentication methods by going to Microsoft Entra ID > Protection > Authentication methods > Registration campaign. [Go to registration campaign](https://entra.microsoft.com/#view/Microsoft_AAD_IAM/AuthenticationMethodsMenuBlade/~/RegistrationCampaign/fromNav/Identity).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Enable password hash sync if hybrid.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Password hash synchronization is one of the sign-in methods used to accomplish hybrid identity. Microsoft Entra Connect synchronizes a hash of the hash of a user's password from an on-premises Microsoft Entra Connect instance to a cloud-based Microsoft Entra Connect cloud sync instance. Password hash synchronization helps by reducing the number of passwords your users need to maintain to just one. Enabling password hash synchronization also allows for leaked credential reporting.",
        "SkippedReason": null,
        "TestResult": "You have enabled password hash sync.\n\n#### Remediation actions:\n\n1. To use password hash synchronization in your organization, you need to install Microsoft Entra Connect and configure directory synchronization between your on-premises Microsoft Entra Connect instance and your Microsoft Entra Connect cloud sync instance. [Follow these steps to enable password hash synchronization](https://docs.microsoft.com/azure/active-directory/hybrid/how-to-connect-password-hash-synchronization#enable-password-hash-synchronization).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Designate more than one global admin.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Having more than one global administrator helps if you’re unable to fulfill the needs or obligations of your organization. It's important to have a delegate or an emergency access account that someone from your team can access if necessary. It also allows admins the ability to monitor each other for signs of a breach.",
        "SkippedReason": null,
        "TestResult": "You currently have 4 global admins.\n\n#### Remediation actions:\n\n1. Assign more than one user a global administrator role in your organization. Go to Microsoft Entra ID > Roles and administrators and select the Global administrator role in the table. Then click Add assignments. [Go to the Global administrator role in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_Azure_PIMCommon/UserRolesViewModelMenuBlade/members/roleObjectId/62e90394-69f5-4237-9190-012177145e10/roleId/62e90394-69f5-4237-9190-012177145e10/roleTemplateId/62e90394-69f5-4237-9190-012177145e10/roleName/Global%20administrator/isRoleCustom//resourceScopeId/%2F/resourceId/26497ce3-3756-4f53-ac9d-f4d438ca62e7).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Enable self-service password reset.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "With self-service password reset in Microsoft Entra ID, users no longer need to engage helpdesk to reset passwords. This feature works well with Microsoft Entra ID dynamically banned passwords, which prevents easily guessable passwords from being used.",
        "SkippedReason": null,
        "TestResult": "You have 0 of  users who don't have self-service password reset enabled. \n\n#### Remediation actions:\n\n1. Follow our [step-by-step guidance to enable self-service password reset](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-enable-sspr).\n\n2. If you have users that are synced from on-premises Microsoft Entra Connect using Microsoft Entra Connect, you may also need to enable the password writeback feature. [For more information, see this article](https://docs.microsoft.com/azure/active-directory/authentication/tutorial-enable-sspr-writeback?WT.mc_id=Portal-Microsoft_AAD_IAM).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Use least privileged administrative roles .",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Ensure that your administrators can accomplish their work with the least amount of privilege assigned to their account. Assigning users roles like Password Administrator or Exchange Online Administrator, instead of Global Administrator, reduces the likelihood of a global administrative privileged account being breached.",
        "SkippedReason": null,
        "TestResult": "You currently have 19 users with privileged administrative roles. \n\n#### Remediation actions:\n\n1. Identify the users in your organization with a persistent global administrator role assigned. Go to Microsoft Entra ID > Roles and administrators and select the Global administrator role in the table. Identify the global admins you want to reassign to a different role. [Go to Roles and administrators in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RolesAndAdministrators).\n\n2. Assign these users to roles where they can complete necessary tasks with the least amount of privilege required. For example, if a user is primarily responsible for Exchange Online administration, they should be assigned that role instead of global administrator. Be sure to have at least two global admins designated to allow for full access to the network if one of the accounts is locked out or compromised. [Check out this overview of available limited administrative roles](https://docs.microsoft.com/azure/active-directory/roles/delegate-by-task).\n\n3. After these persistent global admins have been reassigned new roles, return to Roles and administrators and select the Global administrator role. Select the users that no longer need persistent access and then click Remove. [Go to Roles and administrators in Microsoft Entra ID](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RolesAndAdministrators).\n\n4. Emergency access accounts: If the only other global admin accounts your organization has set up are for \"break-glass\" scenarios, which are ineligible for role reassignment, we recommend that you set the status of this action to “Dismissed” or “Risk accepted”. [Learn more about emergency access accounts](https://docs.microsoft.com/azure/active-directory/roles/security-emergency-access).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Protect all users with a user risk policy .",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "With the user risk policy turned on, Microsoft Entra ID detects the probability that a user account has been compromised. As an administrator, you can configure a user risk Conditional Access policy to automatically respond to a specific user risk level. For example, you can block access to your resources or require a password change to get a user account back into a clean state.",
        "SkippedReason": null,
        "TestResult": "You have 26 of 26 users that don’t have a user risk policy enabled. \n\n#### Remediation actions:\n\n1. To implement this recommendation, you need Microsoft Entra ID Premium P2 licenses. Check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n2. If you’ve invested in Microsoft Entra ID Premium P2 licenses, you can create a Conditional Access policy from scratch or by using a template. Note: Classic Conditional Access policies aren’t scored. Use the recommended steps to receive credit. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-risk-user).\n\n3. If you’re not using Microsoft Entra ID Premium P2 licenses, we recommend you set the status for this action to “Dismissed” or “Risk accepted”. []().",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Protect your tenant with Insider Risk condition in Conditional Access policy.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​, but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​, but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Enabling an Insider Risk-based Conditional Access policy offers crucial benefits, including early detection of anomalies, adaptive access controls, and real-time responses to insider threats. It prevents unauthorized access, enforces compliance, and reduces the impact of insider incidents. By fostering a security-aware culture, the policy integrates with the broader security ecosystem, providing a comprehensive approach to mitigate risks originating from within the organization, safeguarding sensitive data, and enhancing overall security posture.​",
        "SkippedReason": null,
        "TestResult": "You have 26 of 26 users that aren’t covered by the Insider Risk condition in a Conditional Access policy.\n\n#### Remediation actions:\n\n1. Enable Adaptive Protection in Microsoft Purview. You must be a member of the Insider Risk Management or Insider Risk Management Admins role group in Microsoft Purview to configure Adaptive Protection. [Go to Adaptive Protection.](https://go.microsoft.com/fwlink/?linkid=2261736).\n\n2. Create a Conditional Access policy that includes the Insider Risk condition. [Use this risk policy template](https://go.microsoft.com/fwlink/?linkid=2261903).\n\n3. For more information about this recommendation and the associated features, see [Adaptive Protection and Insider Risk Conditional Access recommendation.](https://go.microsoft.com/fwlink/?linkid=2260505).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Remove unused applications.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Removing unused applications improves the security posture and promotes good application hygiene. It reduces the risk of application compromise by someone discovering an unused application and misuse it to get tokens. Depending on the permissions granted to the application and the resources that it exposes, an application compromise could expose sensitive data in an organization., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Removing unused applications improves the security posture and promotes good application hygiene. It reduces the risk of application compromise by someone discovering an unused application and misuse it to get tokens. Depending on the permissions granted to the application and the resources that it exposes, an application compromise could expose sensitive data in an organization., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Removing unused applications improves the security posture and promotes good application hygiene. It reduces the risk of application compromise by someone discovering an unused application and misuse it to get tokens. Depending on the permissions granted to the application and the resources that it exposes, an application compromise could expose sensitive data in an organization.",
        "SkippedReason": null,
        "TestResult": "Your tenant has some applications that have not been used in the past 90 days. We found the following applications were last used more than 90 days ago and have not been issued any tokens. Hence, they are flagged as unused.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ❌ Fail | [WVD](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/394fcff8-5a0e-4dd8-a179-751eced3a6a5) | 07/31/2024 03:00:47 | \n| ❌ Fail | [Simeon Cloud Sync](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/d85241f0-5dd4-447f-b4dd-7e991cc5f210) | 07/31/2024 03:00:47 | \n| ❌ Fail | [ZeroTrustDeployer](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/f2bf309b-d02e-4aca-9266-fe5a91a459d4) | 07/31/2024 03:00:47 | \n| ❌ Fail | [TestWithNoConsent](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/4afede9a-dc90-4578-b4f0-0f5f7141243b) | 07/31/2024 03:00:47 | \n| ❌ Fail | [WindowsDefenderATPSiemConnector](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/45d6336c-6e74-4cff-ba8e-d378fa71e173) | 07/31/2024 03:00:47 | \n| ✅ Pass | [EmergencyAccess](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/815f2735-9764-4a1d-baee-e6778b37c7b1) | 05/18/2024 03:18:30 | \n| ❌ Fail | [MEM Configurator](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/7d55b277-a11c-4709-b11d-cafd883362ba) | 07/31/2024 03:00:47 | \n| ❌ Fail | [Security Baseline Monitoring](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/077d124f-ddd2-4ef7-b5ad-bff50d44587e) | 07/31/2024 03:00:47 | \n| ❌ Fail | [rozemuller-Rozemuller-398c5aee-6356-47fa-b141-2251e85cdb97](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/38c0590b-8d05-4cfa-a5de-10bbc69c25f4) | 07/31/2024 03:00:47 | \n| ❌ Fail | [MWP DevOps Connection](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/c8f2d58d-7fd4-42ac-b17e-7d91c3fe91e3) | 07/31/2024 03:00:47 | \n| ❌ Fail | [TerraForm Deployer](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/89bedc70-63ce-477d-9643-fe6ca17e59bf) | 07/31/2024 03:00:47 | \n| ❌ Fail | [breezefslogix](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/0197ec6d-5929-463f-8474-4f8323cd7400) | 07/31/2024 03:00:47 | \n| ❌ Fail | [DefenderConfigurator](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/7c885f8c-9c36-4083-8726-87d0395303e8) | 07/31/2024 03:00:47 | \n| ❌ Fail | [AzAvdDeployTester](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/e05b8415-9e90-4e0c-815f-e4d724e72e6e) | 07/31/2024 03:00:47 | \n| ❌ Fail | [DemoCreateIntuneMonitoring](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/222d600a-402b-4ec0-8f5e-03f34f87aecc) | 07/31/2024 03:00:47 | \n| ❌ Fail | [rozemuller-Rozemuller-6d3c408e-b617-44ed-bc24-280249636525](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/e4ab0bd6-162b-43e1-813c-c2a72d118dab) | 07/31/2024 03:00:47 | \n| ❌ Fail | [EmergencyAccount](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/b0b017cd-0b96-4c38-a542-2d21136bfd50) | 07/31/2024 03:00:47 | \n| ✅ Pass | [PostmanApp](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/d825f393-ab2f-430c-b47e-01f242972bdf) | 06/27/2024 03:00:28 | \n| ✅ Pass | [IntuneAssistantWeb](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/0f0f930f-a5c7-4da2-a985-8464d1ff51d0) | 07/13/2024 03:01:59 | \n\n\n#### Remediation actions:\n\n1. Navigate to the app registration blade and delete the unused application.[]().\n\n2. We suggest you take appropriate steps to ensure the application is not used in longer intervals of more than 90 days. If so, you should change the frequency of access such that the application’s last used time is within 90 days from its last access date.[]().",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Remove unused credentials from applications.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because An application credential is used to get a token that grants access to a resource or another service. If an application credential is compromised, it could be used to access sensitive resources or allow a bad actor to move latterly depending on the access granted to the application. Removing credentials not actively used by applications improves security posture and promotes app hygiene. It reduces the risk of application compromise and improves the security posture of the application by reducing the attack surface for credential misuse by discovery., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because An application credential is used to get a token that grants access to a resource or another service. If an application credential is compromised, it could be used to access sensitive resources or allow a bad actor to move latterly depending on the access granted to the application. Removing credentials not actively used by applications improves security posture and promotes app hygiene. It reduces the risk of application compromise and improves the security posture of the application by reducing the attack surface for credential misuse by discovery., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "An application credential is used to get a token that grants access to a resource or another service. If an application credential is compromised, it could be used to access sensitive resources or allow a bad actor to move latterly depending on the access granted to the application. Removing credentials not actively used by applications improves security posture and promotes app hygiene. It reduces the risk of application compromise and improves the security posture of the application by reducing the attack surface for credential misuse by discovery.",
        "SkippedReason": null,
        "TestResult": "Your tenant has applications with credentials which have not been used in more than 30 days. Hence, they are flagged as unused.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ❌ Fail | [EmergencyAccess](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/815f2735-9764-4a1d-baee-e6778b37c7b1) | 07/31/2024 04:28:10 | \n| ❌ Fail | [AzAvdDeployTester](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/e05b8415-9e90-4e0c-815f-e4d724e72e6e) | 07/31/2024 04:28:10 | \n| ❌ Fail | [rozemuller-Rozemuller-6d3c408e-b617-44ed-bc24-280249636525](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/e4ab0bd6-162b-43e1-813c-c2a72d118dab) | 07/31/2024 04:28:10 | \n| ❌ Fail | [breezefslogix](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/0197ec6d-5929-463f-8474-4f8323cd7400) | 07/31/2024 04:28:10 | \n| ❌ Fail | [MEM Configurator](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/7d55b277-a11c-4709-b11d-cafd883362ba) | 07/31/2024 04:28:10 | \n| ❌ Fail | [Simeon Cloud Sync](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/d85241f0-5dd4-447f-b4dd-7e991cc5f210) | 07/31/2024 04:28:10 | \n| ❌ Fail | [DemoCreateIntuneMonitoring](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/222d600a-402b-4ec0-8f5e-03f34f87aecc) | 07/31/2024 04:28:10 | \n| ❌ Fail | [PostmanApp](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/d825f393-ab2f-430c-b47e-01f242972bdf) | 07/31/2024 04:28:10 | \n| ❌ Fail | [EmergencyAccount](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/b0b017cd-0b96-4c38-a542-2d21136bfd50) | 07/31/2024 04:28:10 | \n| ❌ Fail | [TestAppForAPI](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/998f8725-89d4-46c2-852d-bc960eeb392a) | 07/31/2024 04:28:10 | \n| ❌ Fail | [IntuneAssistantWeb](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/0f0f930f-a5c7-4da2-a985-8464d1ff51d0) | 07/31/2024 04:28:10 | \n| ❌ Fail | [TestForAPI](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Overview/appId/b0533a36-0d90-4634-9f08-99a50b78b477) | 07/31/2024 04:28:10 | \n\n\n#### Remediation actions:\n\n1. For application resources, navigate to the app registration section in your tenant.[]().\n\n2. In the ‘Certificate and Secrets’ blade, find the credential and remove it.[]().\n\n3. To remove a credential from a service principal resource, use the MS Graph Service Principal API service action [`removePassword`](https://docs.microsoft.com/en-us/graph/api/serviceprincipal-removepassword?view=graph-rest-1.0&tabs=http).",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Renew expiring application credentials.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Renewing the app credential(s) before its expiration ensures the application continues to function and reduces the possibility of downtime due to an expired credential., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Renewing the app credential(s) before its expiration ensures the application continues to function and reduces the possibility of downtime due to an expired credential., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Renewing the app credential(s) before its expiration ensures the application continues to function and reduces the possibility of downtime due to an expired credential.",
        "SkippedReason": null,
        "TestResult": "Your tenant has applications with credentials that will expire soon.\n\n#### Impacted resources\n\n | Status | Name | First detected| \n| --- | --- | --- |\n| ✅ Pass | [DemoCreateIntuneMonitoring](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Credentials/appId/222d600a-402b-4ec0-8f5e-03f34f87aecc) | 06/19/2024 01:10:22 | \n| ❌ Fail | [EmergencyAccount](https://portal.azure.com/#blade/Microsoft_AAD_RegisteredApps/ApplicationMenuBlade/Credentials/appId/b0b017cd-0b96-4c38-a542-2d21136bfd50) | 07/31/2024 01:07:58 | \n\n\n#### Remediation actions:\n\n1. Navigate to the App registration section and locate the application for which the credential needs to be rotated.[]().\n\n2. Navigate to the “Certificates & Secrets” blade of the app registration.[]().\n\n3. Pick the credential type that you want to rotate and navigate to either “Certificates” or “Client Secret” tab and follow the prompts.[]().\n\n4. Once the certificate or secret is successfully added, update the service code to ensure it works with the new credential and has no negative customer impact. You should use Microsoft Entra ID’s sign-in logs to validate that the thumbprint of the certificate matches the one that was just uploaded.[]().\n\n5. After validating the new credential, navigate back to the Certificates and Secrets blade for the app and remove the old credential.[]().",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Renew expiring service principal credentials.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Renewing the service principal credential(s) before expiration ensures the application continues to function and reduces the possibility of downtime due to an expired credential. ",
        "SkippedReason": null,
        "TestResult": "Your tenant has service principals with credentials that will expire soon.\n\n#### Remediation actions:\n\n1. Navigate to the Enterprise applications section and locate the Enterprise application for which the credential needs to be rotated.[]().\n\n2. Navigate to the “Single sign-on” blade.[]().\n\n3. Edit the 'SAML signing certificate' section and follow prompts to add a new certificate.[]().\n\n4. After adding the certificate, change its properties to make certificate active. This will make the previous certificate inactive.[]().\n\n5. Once the certificate is successfully added and activated, validate that your service is working with the new credential, and remove the old credential.[]().\n\n6. If the service principal does not show any credentials after navigating to the enterprise apps blade, we recommend checking the 'passwordCredentials' and 'keyCredentials' property of the service principal object using PowerShell or Microsoft Graph service principal API and use the Microsoft Graph API to rotate credentials.[]().",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1024: Entra Recommendation - Protect all users with a sign-in risk policy.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1024",
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        #region Add detailed test description\r\n        $ActionSteps = $actionSteps | Sort-Object -Property 'stepNumber' | ForEach-Object {\r\n            $_.text + \"[$($_.actionUrl.displayName)]($($_.actionUrl.url)).\"\r\n        }\r\n        $ActionSteps = $ActionSteps -join \"`n`n\"\r\n        if ($status -ne 'completedBySystem' -and $impactedResources) {\r\n            $impactedResourcesList = \"`n`n#### Impacted resources`n`n | Status | Name | First detected| `n\"\r\n            $impactedResourcesList += \"| --- | --- | --- |`n\"\r\n            foreach ($resource in $impactedResources) {\r\n                if ($resource.status -eq 'completedBySystem') {\r\n                    $resourceResult = \"✅ Pass\"\r\n                } else {\r\n                    $resourceResult = \"❌ Fail\"\r\n                }\r\n                $impactedResourcesList += \"| $($resourceResult) | [$($resource.displayName)]($($resource.portalUrl)) | $($resource.addedDateTime) | `n\"\r\n            }\r\n        }\r\n        $ResultMarkdown = $insights + $impactedResourcesList + \"`n`n#### Remediation actions:`n`n\" + $ActionSteps\r\n        Add-MtTestResultDetail -Description $benefits -Result $ResultMarkdown\r\n        #endregion\r\n        # Actual test\r\n        $status | Should -Be \"completedBySystem\" -Because $benefits\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected strings to be the same, because Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA)., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected strings to be the same, because Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA)., but they were different.\nExpected length: 17\nActual length:   6\nStrings differ at index 0.\nExpected: 'completedBySystem'\nBut was:  'active'\n           ^",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1",
            "Line": "30",
            "LineText": "        $status | Should -Be \"completedBySystem\" -Because $benefits\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-EntraRecommendations.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Entra Recommendations",
      "ResultDetail": {
        "TestDescription": "Turning on the sign-in risk policy ensures that suspicious sign-ins are challenged for multifactor authentication (MFA). ",
        "SkippedReason": null,
        "TestResult": "You have 26 of 26 users that don't have a sign-in risk policy turned on.\n\n#### Remediation actions:\n\n1. To implement this recommendation, you need Microsoft Entra ID Premium P2 licenses. Check what Microsoft Entra ID license you have under “Prerequisites” in Microsoft Secure Score or [see your license type under \"Basic information\" in the Microsoft Entra ID Overview.](https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/Overview).\n\n2. If you’ve invested in Microsoft Entra ID Premium P2 licenses, you can create a Conditional Access policy from scratch or by using a template. [Follow these steps to create a Conditional Access policy from scratch or by using a template](https://docs.microsoft.com/azure/active-directory/conditional-access/howto-conditional-access-policy-risk-user).\n\n3. If you’re not using Microsoft Entra ID Premium P2 licenses, we recommend you set this action to “Dismissed” or “Risk accepted”.[]().",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1025: No external user with permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1025",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"ExternalUser\"\r\n        $Check | Should -Be $false -Because \"External user shouldn't have high-privileged roles\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because External user shouldn't have high-privileged roles, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because External user shouldn't have high-privileged roles, but got $true.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "8",
            "LineText": "        $Check | Should -Be $false -Because \"External user shouldn't have high-privileged roles\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 8\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Directory Roles - Permanent assignments",
      "ResultDetail": {
        "TestDescription": "\r\nTake attention on B2B collaboration user with Entra ID directory role assignments on ControlPlane.\r\nVerify the affected external users, the user source (e.g., MSSP/partner or managing tenant) and if the privileged accounts pass your requirements for Conditional Access, Lifecycle Workflow and Identity Protection.\r\nLearn more about the best practices for privileges users:\r\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)",
        "SkippedReason": null,
        "TestResult": "These directory role assignments for ExternalUser exists:\n\n  - [Sander Rozemuller](https://portal.azure.com/#view/Microsoft_AAD_UsersAndTenants/UserProfileMenuBlade/~/overview/userId/dd7d4764-c688-4f0d-9c73-7340ed63ee9e) with Global Administrator on scope directory (tenant-wide)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1026: No hybrid user with permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1026",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"HybridUser\"\r\n        $Check | Should -Be $false -Because \"Hybrid user with access to high-privileged directory roles which should be avoided\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Directory Roles - Permanent assignments",
      "ResultDetail": {
        "TestDescription": "\r\nIt's recommended to use cloud-only accounts for privileges with ControlPlane privileges to avoid attack paths from on-premises environment.\r\nLearn more about the best practices for privileges users:\r\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)\r\n  - [Protecting Microsoft 365 from on-premises attacks](https://learn.microsoft.com/en-us/entra/architecture/protect-m365-from-on-premises-attacks#isolate-privileged-identities)\r\n",
        "SkippedReason": null,
        "TestResult": "Well done!",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1027: No Service Principal with Client Secret and permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1027",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"ServicePrincipalClientSecret\"\r\n        $Check | Should -Be $false -Because \"Service Principal with assignments to high-privileged roles should not using Client Secret\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $false, because Service Principal with assignments to high-privileged roles should not using Client Secret, but got $true.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $false, because Service Principal with assignments to high-privileged roles should not using Client Secret, but got $true.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "16",
            "LineText": "        $Check | Should -Be $false -Because \"Service Principal with assignments to high-privileged roles should not using Client Secret\"\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 16\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Directory Roles - Permanent assignments",
      "ResultDetail": {
        "TestDescription": "\r\nReview your Service Principals with Client Secrets and ControlPlane privileges.\r\nIt's recommended to use certificates for Service Principals. Review if you can replace client secrets by certificates or use managed identities instead of a Service Principal.\r\nLearn more about the best practices for issuing certificates for Service Principals:\r\n  - [Securing service principals in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/architecture/service-accounts-principal#service-principal-authentication)\r\n  - [Best practices for all isolation architectures - Service Principal Credentials](https://learn.microsoft.com/en-us/entra/architecture/secure-best-practices#service-principals-credentials)\r\n",
        "SkippedReason": null,
        "TestResult": "These directory role assignments for ServicePrincipalClientSecret exists:\n\n  - [DemoCreateIntuneMonitoring](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/4b7191c7-46af-469d-a23f-bf363843e149) with Intune Administrator on scope directory (tenant-wide)\n  - [PostmanApp](https://portal.azure.com/#view/Microsoft_AAD_IAM/ManagedAppMenuBlade/~/Overview/objectId/fd61835e-ae7b-49e9-9e4b-74361a215826) with Intune Administrator on scope directory (tenant-wide)\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1028: No user with mailbox and permanent role assignment on Control Plane.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1028",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Passed",
      "ScriptBlock": "\r\n        $Check = Test-MtPrivPermanentDirectoryRole -FilteredAccessLevel \"ControlPlane\" -FilterPrincipal \"UserMailbox\"\r\n        $Check | Should -Be $false -Because \"Privileged user with assignment to high-privileged roles should not be mail-enabled which could be a risk for phishing attacks\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Directory Roles - Permanent assignments",
      "ResultDetail": {
        "TestDescription": "\r\nTake attention on mail-enabled administrative accounts with ControlPlane privileges.\r\nIt's recommended to use mail forwarding to regular work account which allows to avoid direct mail access and phishing attacks on privileged user.\r\nLearn more about the best practices for securing privileged user accounts:\r\n  - [Securing privileged access for hybrid and cloud deployments in Microsoft Entra ID](https://learn.microsoft.com/en-us/entra/identity/role-based-access-control/security-planning#ensure-separate-user-accounts-and-mail-forwarding-for-global-administrator-accounts)\r\n",
        "SkippedReason": null,
        "TestResult": "Well done!",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1029: Stale accounts are not assigned to privileged roles.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1029",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\r\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\r\n        } else {\r\n            $Check = Test-MtPimAlertsExists -AlertId \"StaleSignInAlert\"\r\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Accounts in a privileged role have not signed in recently. These accounts might be service or shared accounts that aren't being maintained and are vulnerable to attackers., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Accounts in a privileged role have not signed in recently. These accounts might be service or shared accounts that aren't being maintained and are vulnerable to attackers., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "30",
            "LineText": "            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 30\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Privileged Identity Management (PIM) - Alerts",
      "ResultDetail": {
        "TestDescription": "\r\n\r\n**Security Impact**\n\n\r\nAccounts in a privileged role have not signed in recently. These accounts might be service or shared accounts that aren't being maintained and are vulnerable to attackers.\r\n\r\n**Mitigation steps**\n\n\r\nReview the accounts in the list. If they no longer need access, remove them from their privileged roles.\r\n\r\n**How to prevent**\n\n\r\nRegularly review accounts with privileged roles using <a href=\"https://docs.microsoft.com/en-us/azure/active-directory/governance/access-reviews-overview\" target=\"_blank\" >access reviews</a> and remove role assignments which are no longer needed.\r\n",
        "SkippedReason": null,
        "TestResult": "4 account(s) in privileged roles that have not signed in to Azure AD in the past 30 day(s)\n\n\r\n  -  Break Glass 2 with Global Administrator by AssigneeId 2e5229f0-2196-4451-a780-e74d88ab769c\n   -  Sharepoint Admin with Global Administrator by AssigneeId 979bb5a8-454a-41a1-a109-c9c31a5d3c7a\n   -  Sander Rozemuller with Directory Readers by AssigneeId 727246d1-f23f-49b6-af4b-fd24ff94c89d\n   -  Simeon Cloud User with SharePoint Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Sharepoint Admin with SharePoint Administrator by AssigneeId 979bb5a8-454a-41a1-a109-c9c31a5d3c7a\n   -  Simeon Cloud User with Teams Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Groups Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Security Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Cloud Device Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Compliance Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Intune Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Exchange Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with User Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Application Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n   -  Simeon Cloud User with Authentication Policy Administrator by AssigneeId 8ded1076-6d24-4054-8cec-636ec79f4fa7\n\r\nGet more details from the PIM alert [Potential stale accounts in a privileged role](https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/AlertDetail/providerId/aadroles/alertId/StaleSignInAlert/resourceId/d9e7bad9-ae68-4a71-9c92-8508128134a2) in the Azure Portal.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "MT.1030: Eligible role assignments on Control Plane are in use by administrators.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1030",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\r\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\r\n        } else {\r\n            $Check = Test-MtPimAlertsExists -AlertId \"RedundantAssignmentAlert\" -FilteredAccessLevel \"ControlPlane\"\r\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "You cannot call a method on a null-valued expression.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(ScriptBlockClauseToInvoke clauseToInvoke, Boolean createLocalScope, Dictionary`2 functionsToDefine, List`1 variablesToDefine, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(Boolean createLocalScope, Dictionary`2 functionsToDefine, List`1 variablesToDefine, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Boolean propagateAllExceptionsToTop, List`1 variablesToDefine, Dictionary`2 functionsToDefine, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeUsingCmdlet(Cmdlet contextCmdlet, Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Object[] args)\n   at Microsoft.PowerShell.Commands.ForEachObjectCommand.ProcessScriptBlockParameterSet()\n   at Microsoft.PowerShell.Commands.ForEachObjectCommand.ProcessRecord()\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\n   at System.Management.Automation.CommandProcessor.ProcessRecord()"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 7,
            "Activity": "ForEach-Object",
            "Reason": "RuntimeException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "InvokeMethodOnNull,Microsoft.PowerShell.Commands.ForEachObjectCommand",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "ForEach-Object",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 40,
            "OffsetInLine": 56,
            "HistoryId": 43,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1",
            "Line": "    $AffectedRoleAssignments = $Alert.additionalData | ForEach-Object {\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1:40 char:56\n+ …   $AffectedRoleAssignments = $Alert.additionalData | ForEach-Object {\n+                                                        ~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1",
            "InvocationName": "ForEach-Object",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1: line 43\nat Test-MtPimAlertsExists<Process>, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1: line 40\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 37\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Privileged Identity Management (PIM) - Alerts",
      "ResultDetail": null
    },
    {
      "Name": "MT.1031: Privileged role on Control Plane are managed by PIM only.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1031",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\r\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\r\n        } else {\r\n            $Check = Test-MtPimAlertsExists -AlertId \"RolesAssignedOutsidePimAlert\" -FilteredAccessLevel \"ControlPlane\"\r\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "ErrorRecord": "You cannot call a method on a null-valued expression.",
            "WasThrownFromThrowStatement": false,
            "TargetSite": "Void CheckActionPreference(System.Management.Automation.Language.FunctionContext, System.Exception)",
            "Message": "You cannot call a method on a null-valued expression.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": "System.Management.Automation",
            "HResult": -2146233087,
            "StackTrace": "   at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)\n   at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.Interpreter.Run(InterpretedFrame frame)\n   at System.Management.Automation.Interpreter.LightLambda.RunVoid1[T0](T0 arg0)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(ScriptBlockClauseToInvoke clauseToInvoke, Boolean createLocalScope, Dictionary`2 functionsToDefine, List`1 variablesToDefine, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipeImpl(Boolean createLocalScope, Dictionary`2 functionsToDefine, List`1 variablesToDefine, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeWithPipe(Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Pipe outputPipe, InvocationInfo invocationInfo, Boolean propagateAllExceptionsToTop, List`1 variablesToDefine, Dictionary`2 functionsToDefine, Object[] args)\n   at System.Management.Automation.ScriptBlock.InvokeUsingCmdlet(Cmdlet contextCmdlet, Boolean useLocalScope, ErrorHandlingBehavior errorHandlingBehavior, Object dollarUnder, Object input, Object scriptThis, Object[] args)\n   at Microsoft.PowerShell.Commands.ForEachObjectCommand.ProcessScriptBlockParameterSet()\n   at Microsoft.PowerShell.Commands.ForEachObjectCommand.ProcessRecord()\n   at System.Management.Automation.Cmdlet.DoProcessRecord()\n   at System.Management.Automation.CommandProcessor.ProcessRecord()"
          },
          "TargetObject": null,
          "CategoryInfo": {
            "Category": 7,
            "Activity": "ForEach-Object",
            "Reason": "RuntimeException",
            "TargetName": "",
            "TargetType": ""
          },
          "FullyQualifiedErrorId": "InvokeMethodOnNull,Microsoft.PowerShell.Commands.ForEachObjectCommand",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": "ForEach-Object",
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 40,
            "OffsetInLine": 56,
            "HistoryId": 43,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1",
            "Line": "    $AffectedRoleAssignments = $Alert.additionalData | ForEach-Object {\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1:40 char:56\n+ …   $AffectedRoleAssignments = $Alert.additionalData | ForEach-Object {\n+                                                        ~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1",
            "InvocationName": "ForEach-Object",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1: line 43\nat Test-MtPimAlertsExists<Process>, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtPimAlertsExists.ps1: line 40\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 45\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Privileged Identity Management (PIM) - Alerts",
      "ResultDetail": null
    },
    {
      "Name": "MT.1032: Limited number of Global Admins are assigned.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1032",
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ],
      "Result": "Failed",
      "ScriptBlock": "\r\n        if ( ( Get-MtLicenseInformation EntraID ) -ne \"P2\" ) {\r\n            Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP2\r\n        } else {\r\n            $Check = Test-MtPimAlertsExists -AlertId \"TooManyGlobalAdminsAssignedToTenantAlert\"\r\n            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "Expected $true, because Global administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk., but got $false.",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "Expected $true, because Global administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk., but got $false.",
            "File": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1",
            "Line": "54",
            "LineText": "            $check.numberOfAffectedItems -eq \"0\" | Should -Be $true -Because $check.securityImpact\r",
            "Terminating": true
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterAssertionFailed",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 8078,
            "OffsetInLine": 13,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "            throw $errorRecord\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:8078 char:13\n+             throw $errorRecord\n+             ~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Invoke-Assertion, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8078\nat Should<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 8016\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-PrivilegedAssignments.Tests.ps1: line 54\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Privileged Identity Management (PIM) - Alerts",
      "ResultDetail": {
        "TestDescription": "\r\n\r\n**Security Impact**\n\n\r\nGlobal administrator is the highest privileged role. If a Global Administrator is compromised, the attacker gains access to all of their permissions, which puts your whole system at risk.\r\n\r\n**Mitigation steps**\n\n\r\n·Review the users in the list and remove any that do not absolutely need the Global Administrator role.\r\n·Assign lower privileged roles to these users instead.\r\n\r\n**How to prevent**\n\n\r\nAssign users the least privileged role they need.\r\n",
        "SkippedReason": null,
        "TestResult": "The percentage of global administrators is high, relative to other privileged roles. It is recommended to use least privileged roles, with just enough privileges to perform the required tasks.\n\n\r\n  -  Sander Rozemuller (srozemuller@rozemuller.onmicrosoft.com)\n   -  Sander Rozemuller (srozemuller_gmail.com#EXT#@rozemuller.onmicrosoft.com)\n   -  Sharepoint Admin (sharepoint_creator@rozemuller.onmicrosoft.com)\n   -  Break Glass 2 (breakGlass2@rozemuller.onmicrosoft.com)\n\r\nGet more details from the PIM alert [There are too many global administrators](https://portal.azure.com/#view/Microsoft_Azure_PIMCommon/AlertDetail/providerId/aadroles/alertId/TooManyGlobalAdminsAssignedToTenantAlert/resourceId/d9e7bad9-ae68-4a71-9c92-8508128134a2) in the Azure Portal.\r\n",
        "TestSkipped": ""
      }
    },
    {
      "Name": "EIDSCA.AF05: Authentication Method - FIDO2 security key - Restricted.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF05",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF05"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .keyRestrictions.aaGuids -notcontains $null = 'true'\r\n        #>\r\n        Test-MtEidscaAF05 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": null
    },
    {
      "Name": "EIDSCA.AF06: Authentication Method - FIDO2 security key - Restrict specific keys.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.AF06",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF06"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/authenticationMethodsPolicy/authenticationMethodConfigurations('Fido2')\"\r\n            .keyRestrictions.aaGuids -notcontains $null -and ($result.keyRestrictions.enforcementType -eq 'allow' -or $result.keyRestrictions.enforcementType -eq 'block') = 'true'\r\n        #>\r\n        Test-MtEidscaAF06 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Authentication Method - FIDO2 security key",
      "ResultDetail": null
    },
    {
      "Name": "EIDSCA.CR02: Consent Framework - Admin Consent Request - Reviewers will receive email notifications for requests.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR02",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR02"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\r\n            .notifyReviewers = 'true'\r\n        #>\r\n        Test-MtEidscaCR02 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Consent Framework - Admin Consent Request",
      "ResultDetail": null
    },
    {
      "Name": "EIDSCA.CR03: Consent Framework - Admin Consent Request - Reviewers will receive email notifications when admin consent requests are about to expire.",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR03",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR03"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\r\n            .notifyReviewers = 'true'\r\n        #>\r\n        Test-MtEidscaCR03 | Should -Be 'true'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Consent Framework - Admin Consent Request",
      "ResultDetail": null
    },
    {
      "Name": "EIDSCA.CR04: Consent Framework - Admin Consent Request - Consent request duration (days).",
      "HelpUrl": "https://maester.dev/docs/tests/EIDSCA.CR04",
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR04"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        <#\r\n            Check if \"https://graph.microsoft.com/beta/policies/adminConsentRequestPolicy\"\r\n            .requestDurationInDays = '30'\r\n        #>\r\n        Test-MtEidscaCR04 | Should -Be '30'\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/EIDSCA/Test-EIDSCA.Generated.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Consent Framework - Admin Consent Request",
      "ResultDetail": null
    },
    {
      "Name": "MS.AAD.4.1: Security logs SHALL be sent to the agency's security operations center for monitoring.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.4.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        Test-MtCisaDiagnosticSettings | Should -Be $true -Because \"diagnostic settings are configured for all logs.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaDiagnosticSettings.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MS.AAD.7.1: A minimum of two users and a maximum of eight users SHALL be provisioned with the Global Administrator role.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        Test-MtCisaGlobalAdminCount | Should -Be $true -Because \"two or more and eight or fewer Global Administrators exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaGlobalAdminCount.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MS.AAD.7.2: Privileged users SHALL be provisioned with finer-grained roles instead of Global Administrator.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        Test-MtCisaGlobalAdminRatio | Should -Be $true -Because \"more granular role assignments exist than global admin assignments.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaGlobalAdminRatio.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MS.AAD.7.3: Privileged users SHALL be provisioned cloud-only accounts separate from an on-premises directory or other federated identity providers.",
      "HelpUrl": "",
      "Tag": [
        "MS.AAD",
        "MS.AAD.7.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        Test-MtCisaCloudGlobalAdmin | Should -Be $true -Because \"no hybrid Global Administrators exist.\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/Entra/Test-MtCisaCloudGlobalAdmin.Tests.ps1",
      "ErrorRecord": [],
      "Block": "CISA SCuBA",
      "ResultDetail": null
    },
    {
      "Name": "MS.EXO.1.1: Automatic forwarding to external domains SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.1.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaAutoExternalForwarding = Test-MtCisaAutoExternalForwarding\r\n\r\n        if($null -ne $cisaAutoExternalForwarding) {\r\n            $cisaAutoExternalForwarding | Should -Be $true -Because \"auto forwarding is not enabled for any domains\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAutoExternalForwarding.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaAutoExternalForwarding, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaAutoExternalForwarding.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAutoExternalForwarding.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Automatic forwarding to external domains SHALL be disabled.\r\n\r\nRationale: Adversaries can use automatic forwarding to gain persistent access to a victim's email. Disabling forwarding to external domains prevents this technique when the adversary is external to the organization but does not impede legitimate internal forwarding.\r\n\r\n#### Remediation action:\r\n\r\nTo disable automatic forwarding to external domains:\r\n\r\n1. Sign in to the **Exchange admin center**.\r\n2. Select **Mail flow**, then **[Remote domains](https://admin.exchange.microsoft.com/#/remotedomains)**.\r\n3. Select **Default**.\r\n4. Under **Email reply types**, select **Edit reply types**.\r\n5. Clear the checkbox next to **Allow automatic forwarding**, then click **Save**.\r\n6. Return to **Remote domains** and repeat steps 4 and 5 for each additional remote domain in the list.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Remote domains](https://admin.exchange.microsoft.com/#/remotedomains)\r\n* [CISA 1 Automatic Forwarding to External Domains - MS.EXO.1.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo11v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L28)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.12.1: IP allow lists SHOULD NOT be created.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaAntiSpamAllowList = Test-MtCisaAntiSpamAllowList\r\n\r\n        if ($null -ne $cisaAntiSpamAllowList) {\r\n            $cisaAntiSpamAllowList | Should -Be $true -Because \"no anti-spam policy allow IPs.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAntiSpamAllowList.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaAntiSpamAllowList, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaAntiSpamAllowList.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAntiSpamAllowList.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "IP allow lists SHOULD NOT be created.\r\n\r\nRationale: Messages sent from IP addresses on an allow list bypass important security mechanisms, including spam filtering and sender authentication checks. Avoiding use of IP allow lists prevents potential threats from circumventing security mechanisms.\r\n\r\n#### Remediation action:\r\n\r\nTo modify the connection filters, follow the instructions found in Use the Microsoft 365 Defender portal to modify the default connection filter policy.\r\n1. Sign in to **Microsoft 365 Defender portal**.\r\n2. From the left-hand menu, find **Email & collaboration** and select **Policies and Rules**.\r\n3. Select **Threat Policies** from the list of policy names.\r\n4. Under **Policies**, select [**Anti-spam**](https://security.microsoft.com/antispam).\r\n5. Select **Connection filter policy (Default)**.\r\n6. Click **Edit connection filter policy**.\r\n7. Ensure no addresses are specified under **Always allow messages from the following IP addresses or address range**.\r\n\r\n#### Related links\r\n\r\n* [Defender admin center - Anti-spam policies](https://security.microsoft.com/antispam)\r\n* [CISA 12 IP Allow Lists - MS.EXO.12.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo121v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L683)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.12.2: Safe lists SHOULD NOT be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaAntiSpamSafeList = Test-MtCisaAntiSpamSafeList\r\n\r\n        if($null -eq $cisaAntiSpamSafeList) {\r\n            $cisaAntiSpamSafeList | Should -Be $true -Because \"Safe Lists should be disabled.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAntiSpamSafeList.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaAntiSpamSafeList, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaAntiSpamSafeList.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaAntiSpamSafeList.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Safe lists SHOULD NOT be enabled.\r\n\r\nRationale: Messages sent from allowed safe list addresses bypass important security mechanisms, including spam filtering and sender authentication checks. Avoiding use of safe lists prevents potential threats from circumventing security mechanisms. While blocking all malicious senders is not feasible, blocking specific known, malicious IP addresses may reduce the threat from specific senders.\r\n\r\n#### Remediation action:\r\n\r\nTo modify the connection filters, follow the instructions found in Use the Microsoft 365 Defender portal to modify the default connection filter policy.\r\n1. Sign in to **Microsoft 365 Defender portal**.\r\n2. From the left-hand menu, find **Email & collaboration** and select **Policies and Rules**.\r\n3. Select **Threat Policies** from the list of policy names.\r\n4. Under **Policies**, select [**Anti-spam**](https://security.microsoft.com/antispam).\r\n5. Select **Connection filter policy (Default)**.\r\n6. Click **Edit connection filter policy**.\r\n8. Ensure **Turn on safe list** is not selected.\r\n\r\n#### Related links\r\n\r\n* [Defender admin center - Anti-spam policies](https://security.microsoft.com/antispam)\r\n* [CISA 12 IP Allow Lists - MS.EXO.12.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo122v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L710)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.13.1: Mailbox auditing SHALL be enabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.13.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaMailboxAuditing = Test-MtCisaMailboxAuditing\r\n\r\n        if($null -ne $cisaMailboxAuditing) {\r\n            $cisaMailboxAuditing | Should -Be $true -Because \"mailbox auditing is enabled.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaMailboxAuditing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaMailboxAuditing, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaMailboxAuditing.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaMailboxAuditing.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Mailbox auditing SHALL be enabled.\r\n\r\nRationale: Exchange Online user accounts can be compromised or misused. Enabling mailbox auditing provides a valuable source of information to detect and respond to mailbox misuse.\r\n\r\n#### Remediation action:\r\n\r\nMailbox auditing can be managed from the [Exchange Online PowerShell module](https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-mailboxes?view=o365-worldwide). Follow the instructions listed on Manage mailbox auditing in Office 365.\r\n1. To enable mailbox auditing by default for your organization via PowerShell:\r\n2. Connect to the Exchange Online PowerShell.\r\n3. Run the following command:\r\n    `Set-OrganizationConfig –AuditDisabled $false`\r\n\r\n#### Related links\r\n\r\n* [Microsoft Learn - Mailbox Auditing](https://learn.microsoft.com/en-us/microsoft-365/compliance/audit-mailboxes?view=o365-worldwide)\r\n* [CISA 13 Mailbox Auditing - MS.EXO.13.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo131v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L741)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.2.2: An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.2.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        $cisaSpfDirective = Test-MtCisaSpfDirective\r\n\r\n        if ($null -ne $cisaSpfDirective) {\r\n            $cisaSpfDirective | Should -Be $true -Because \"SPF record should restrict authorized senders.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfDirective.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaSpfDirective, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaSpfDirective.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSpfDirective.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "An SPF policy SHALL be published for each domain, designating only these addresses as approved senders.\r\n\r\nRationale: An adversary may modify the `FROM` field of an email such that it appears to be a legitimate email sent by an agency, facilitating phishing attacks. Publishing an SPF policy for each agency domain mitigates forged `FROM` fields by providing a means for recipients to detect emails spoofed in this way. SPF is required for FCEB departments and agencies by Binding Operational Directive (BOD) 18-01, \"Enhance Email and Web Security\".\r\n\r\n#### Remediation action:\r\n\r\nSPF is not configured through the Exchange admin center, but rather via DNS records hosted by the agency's domain. Thus, the exact steps needed to set up SPF varies from agency to agency. See [Add or edit an SPF TXT record to help prevent email spam (Outlook, Exchange Online) | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/admin/get-help-with-domains/create-dns-records-at-any-dns-hosting-provider?view=o365-worldwide#add-or-edit-an-spf-txt-record-to-help-prevent-email-spam-outlook-exchange-online) for more details.\r\n\r\nTo test your SPF configuration, consider using a web-based tool, such as those listed under [How can I validate SPF records for my domain? | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/admin/setup/domains-faq?view=o365-worldwide#how-can-i-validate-spf-records-for-my-domain). Additionally, SPF records can be requested using the PowerShell tool `Resolve-DnsName`. For example:\r\n\r\n`Resolve-DnsName example.onmicrosoft.com txt`\r\n\r\nIf SPF is configured, you will see a response resembling `v=spf1 include:spf.protection.outlook.com -all` returned; though by necessity, the contents of the SPF policy may vary by agency. In this example, the SPF policy indicates the IP addresses listed by the policy for \"spf.protection.outlook.com\" are the only approved senders for \"example.onmicrosoft.com.\" These IPs can be determined via an additional SPF lookup, this time for \"spf.protection.outlook.com.\" Ensure the IP addresses listed as approved senders for your domain are those identified for MS.EXO.2.1v1. [See SPF TXT record syntax for Microsoft 365 | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-anti-spoofing?view=o365-worldwide#spf-txt-record-syntax-for-microsoft-365) for a more in-depth discussion of SPF record syntax.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\r\n* [CISA 2 Sender Policy Framework - MS.EXO.2.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo22v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L75)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.3.1: DKIM SHOULD be enabled for all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.3.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        $cisaDkim = Test-MtCisaDkim\r\n\r\n        if ($null -ne $cisaDkim) {\r\n            $cisaDkim | Should -Be $true -Because \"DKIM record should exist and be configured.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDkim.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaDkim, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaDkim.ps1: line 23\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDkim.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "DKIM SHOULD be enabled for all domains.\r\n\r\nRationale: An adversary may modify the `FROM` field of an email such that it appears to be a legitimate email sent by an agency, facilitating phishing attacks. Enabling DKIM is another means for recipients to detect spoofed emails and verify the integrity of email content.\r\n\r\n#### Remediation action:\r\n\r\nTo enable DKIM, follow the instructions listed on [Steps to Create, enable and disable DKIM from Microsoft 365 Defender portal | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-dkim-configure?view=o365-worldwide#steps-to-create-enable-and-disable-dkim-from-microsoft-365-defender-portal).\r\n\r\n#### Related links\r\n\r\n* [Defender admin center - Email authentication settings](https://security.microsoft.com/authentication?viewid=DKIM)\r\n* [CISA 3 Sender Policy Framework - MS.EXO.3.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo31v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L107)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.4.1: A DMARC policy SHALL be published for every second-level domain.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        $cisaDmarcRecordExist = Test-MtCisaDmarcRecordExist\r\n\r\n        if ($null -ne $cisaDmarcRecordExist) {\r\n            $cisaDmarcRecordExist | Should -Be $true -Because \"DMARC record should exist.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcRecordExist.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaDmarcRecordExist, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaDmarcRecordExist.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcRecordExist.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "A DMARC policy SHALL be published for every second-level domain.\r\n\r\nRationale: Without a DMARC policy available for each domain, recipients may improperly handle SPF and DKIM failures, possibly enabling spoofed emails to reach end users' mailboxes. Publishing DMARC records at the second-level domain protects the second-level domains and all subdomains.\r\n\r\n#### Remediation action:\r\n\r\nDMARC is not configured through the Exchange admin center, but rather via DNS records hosted by the agency's domain. As such, implementation varies depending on how an agency manages its DNS records. See [Form the DMARC TXT record for your domain | Microsoft Learn](https://learn.microsoft.com/en-us/microsoft-365/security/office-365-security/email-authentication-dmarc-configure?view=o365-worldwide#step-4-form-the-dmarc-txt-record-for-your-domain) for Microsoft guidance.\r\n\r\nA DMARC record published at the second-level domain will protect all subdomains. In other words, a DMARC record published for `example.com` will protect both `a.example.com` and `b.example.com`, but a separate record would need to be published for `c.example.gov`.\r\n\r\nTo test your DMARC configuration, consider using one of many publicly available web-based tools. Additionally, DMARC records can be requested using the PowerShell tool `Resolve-DnsName`. For example:\r\n\r\n`Resolve-DnsName _dmarc.example.com txt`\r\n\r\nIf DMARC is configured, a response resembling `v=DMARC1; p=reject; pct=100; rua=mailto:reports@dmarc.cyber.dhs.gov, mailto:reports@example.com; ruf=mailto:reports@example.com` will be returned, though by necessity, the contents of the record will vary by agency. In this example, the policy indicates all emails failing the SPF/DKIM checks are to be rejected and aggregate reports sent to reports@dmarc.cyber.dhs.gov and reports@example.com. Failure reports will be sent to reports@example.com.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\r\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo41v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L147)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.4.2: The DMARC message rejection option SHALL be p=reject.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        $cisaDmarcRecordReject = Test-MtCisaDmarcRecordReject\r\n\r\n        if ($null -ne $cisaDmarcRecordReject) {\r\n            $cisaDmarcRecordReject | Should -Be $true -Because \"DMARC record policy should be reject.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcRecordReject.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaDmarcRecordReject, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaDmarcRecordReject.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcRecordReject.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "The DMARC message rejection option SHALL be p=reject.\r\n\r\nRationale: Of the three policy options (i.e., none, quarantine, and reject), reject provides the strongest protection. Reject is the level of protection required by BOD 18-01 for FCEB departments and agencies.\r\n\r\n#### Remediation action:\r\n\r\n* See MS.EXO.4.1v1 Instructions for an overview of how to publish and check a DMARC record.\r\n* Ensure the record published includes p=reject.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\r\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo42v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L176)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.4.3: The DMARC point of contact for aggregate reports SHALL include reports@dmarc.cyber.dhs.gov.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.4.3",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        $cisaDmarcAggregateCisa = Test-MtCisaDmarcAggregateCisa\r\n\r\n        if ($null -ne $cisaDmarcAggregateCisa) {\r\n            $cisaDmarcAggregateCisa | Should -Be $true -Because \"DMARC record includes proper aggregate target.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcAggregateCisa.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaDmarcAggregateCisa, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaDmarcAggregateCisa.ps1: line 28\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaDmarcAggregateCisa.Tests.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "The DMARC point of contact for aggregate reports SHALL include `reports@dmarc.cyber.dhs.gov`.\r\n\r\nRationale: Email spoofing attempts are not inherently visible to domain owners. DMARC provides a mechanism to receive reports of spoofing attempts. Including reports@dmarc.cyber.dhs.gov as a point of contact for these reports gives CISA insight into spoofing attempts and is required by BOD 18-01 for FCEB departments and agencies.\r\n\r\n**Note: Only federal, executive branch, departments and agencies should include this email address in their DMARC record.**\r\n\r\n#### Remediation action:\r\n\r\n* See MS.EXO.4.1v1 Instructions for an overview of how to publish and check a DMARC record.\r\n* Ensure the record published includes reports@dmarc.cyber.dhs.gov as one of the emails for the RUA field.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Accepted domains](https://admin.exchange.microsoft.com/#/accepteddomains)\r\n* [CISA 4 Domain-Based Message Authentication, Reporting, and Conformance (DMARC) - MS.EXO.4.3v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo43v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L207)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.5.1: SMTP AUTH SHALL be disabled.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.5.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaSmtpAuthentication = Test-MtCisaSmtpAuthentication\r\n\r\n        if ($null -ne $cisaSmtpAuthentication) {\r\n            $cisaSmtpAuthentication | Should -Be $true -Because \"SMTP Authentication is disabled.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSmtpAuthentication.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaSmtpAuthentication, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaSmtpAuthentication.ps1: line 20\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaSmtpAuthentication.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "SMTP AUTH SHALL be disabled.\r\n\r\nRationale: SMTP AUTH is not used or needed by modern email clients. Therefore, disabling it as the global default conforms to the principle of least functionality.\r\n\r\n#### Remediation action:\r\n\r\n1. To disable SMTP AUTH for the organization:\r\n2. Sign in to the **Exchange admin center**.\r\n3. On the left hand pane, select [**Settings**](https://admin.exchange.microsoft.com/#/settings); then from the settings list, select **Mail Flow**.\r\n4. Make sure the setting **Turn off SMTP AUTH protocol for your organization** is checked.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Settings](https://admin.exchange.microsoft.com/#/settings)\r\n* [CISA 5 Simple Mail Transfer Protocol Authentication - MS.EXO.5.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo51v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L306)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.6.1: Contact folders SHALL NOT be shared with all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.6.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaContactSharing = Test-MtCisaContactSharing\r\n\r\n        if($null -eq $cisaContactSharing) {\r\n            $cisaContactSharing | Should -Be $true -Because \"contact sharing is disabled.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaContactSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaContactSharing, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaContactSharing.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaContactSharing.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Contact folders SHALL NOT be shared with all domains.\r\n\r\nRationale: Contact folders may contain information that should not be shared by default with all domains. Disabling sharing with all domains closes an avenue for data exfiltration while still allowing for specific legitimate use as needed.\r\n\r\n#### Remediation action:\r\n\r\nTo restrict sharing with all domains:\r\n1. Sign in to the **Exchange admin center**.\r\n2. On the left-hand pane under **Organization**, select **Sharing**.\r\n3. Select [**Individual Sharing**](https://admin.exchange.microsoft.com/#/individualsharing).\r\n4. For all existing policies, select the policy, then select **Manage domains**.\r\n5. For all sharing rules under all existing policies, ensure **Sharing with everyone** and **Anonymous** do not include ContactsSharing.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Individual Sharing](https://admin.exchange.microsoft.com/#/individualsharing)\r\n* [CISA 6 Calendar and Contact Sharing - MS.EXO.6.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo61v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L335)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.6.2: Calendar details SHALL NOT be shared with all domains.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.6.2",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaCalendarSharing = Test-MtCisaCalendarSharing\r\n\r\n        if($null -eq $cisaCalendarSharing) {\r\n            $cisaCalendarSharing | Should -Be $true -Because \"calendar sharing is disabled.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaCalendarSharing.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaCalendarSharing, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaCalendarSharing.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaCalendarSharing.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "Calendar details SHALL NOT be shared with all domains.\r\n\r\nRationale: Calendar details may contain information that should not be shared by default with all domains. Disabling sharing with all domains closes an avenue for data exfiltration while still allowing for legitimate use as needed.\r\n\r\n#### Remediation action:\r\n\r\nTo restrict sharing with all domains:\r\n1. Sign in to the **Exchange admin center**.\r\n2. On the left-hand pane under **Organization**, select **Sharing**.\r\n3. Select [**Individual Sharing**](https://admin.exchange.microsoft.com/#/individualsharing).\r\n4. For all existing policies, select the policy, then select **Manage domains**.\r\n5. For all sharing rules under all existing policies, ensure **Sharing with everyone** and **Anonymous** do not include CalendarSharing.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Individual Sharing](https://admin.exchange.microsoft.com/#/individualsharing)\r\n* [CISA 6 Calendar and Contact Sharing - MS.EXO.6.2v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo62v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L368)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MS.EXO.7.1: External sender warnings SHALL be implemented.",
      "HelpUrl": "",
      "Tag": [
        "MS.EXO",
        "MS.EXO.7.1",
        "CISA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        $cisaExternalSenderWarning = Test-MtCisaExternalSenderWarning\r\n\r\n        if ($null -ne $cisaExternalSenderWarning) {\r\n            $cisaExternalSenderWarning | Should -Be $true -Because \"external sender warning is set.\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaExternalSenderWarning.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtCisaExternalSenderWarning, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/CISA/exchange/Test-MtCisaExternalSenderWarning.ps1: line 21\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/CISA/exchange/Test-MtCisaExternalSenderWarning.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "CISA SCuBA",
      "ResultDetail": {
        "TestDescription": "External sender warnings SHALL be implemented.\r\n\r\nRationale: Phishing is an ever-present threat. Alerting users when email originates from outside their organization can encourage them to exercise increased caution, especially if an email is one they expected from an internal sender.\r\n\r\n#### Remediation action:\r\n\r\nTo create a mail flow rule to produce external sender warnings:\r\n1. Sign in to the **Exchange admin center**.\r\n2. Under **Mail flow**, select [**Rules**](https://admin.exchange.microsoft.com/#/transportrules).\r\n3. Click the plus (+) button to create a new rule.\r\n4. Select **Modify messages…**.\r\n5. Give the rule an appropriate name.\r\n6. Under **Apply this rule if…**, select **The sender is external/internal**.\r\n7. Under **select sender location**, select **Outside the organization**, then click **OK**.\r\n8. Under **Do the following…**, select **Prepend the subject of the message with…**.\r\n9. Under **specify subject prefix**, enter a message such as \"[External]\" (without the quotation marks), then click **OK**.\r\n10. Click **Next**.\r\n11. Under **Choose a mode for this rule**, select **Enforce**.\r\n12. Leave the **Severity** as **Not Specified**.\r\n13. Leave the **Match sender address in message** as **Header** and click **Next**.\r\n14. Click **Finish** and then **Done**.\r\n15. The new rule will be disabled. Re-select the new rule to show its settings and slide the **Enable or disable rule** slider to the right until it shows as **Enabled**.\r\n\r\n#### Related links\r\n\r\n* [Exchange admin center - Mail Flow Rules](https://admin.exchange.microsoft.com/#/transportrules)\r\n* [CISA 7 External Sender Warnings - MS.EXO.7.1v1](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/baselines/exo.md#msexo71v1)\r\n* [CISA ScubaGear Rego Reference](https://github.com/cisagov/ScubaGear/blob/main/PowerShell/ScubaGear/Rego/EXOConfig.rego#L405)\r\n\r\n",
        "SkippedReason": "Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestResult": "\r\nSkipped. Not connected to Exchange Online. See [Connecting to Exchange Online](https://maester.dev/docs/installation#optional-modules-and-permissions)",
        "TestSkipped": "NotConnectedExchange"
      }
    },
    {
      "Name": "MT.1002: App management restrictions on applications and service principals is configured and enabled.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1002",
      "Tag": [
        "App",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n\r\n        Test-MtAppManagementPolicyEnabled | Should -Be $true -Because \"an app policy for workload identities should be defined to enforce strong credentials instead of passwords and a maximum expiry period (e.g. credential should be renewed every six months)\"\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-AppManagementPolicies.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because This test is for tenants that are licensed for Entra Workload ID. See [Entra Workload ID licensing](https://learn.microsoft.com/entra/workload-id/workload-identities-faqs)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because This test is for tenants that are licensed for Entra Workload ID. See [Entra Workload ID licensing](https://learn.microsoft.com/entra/workload-id/workload-identities-faqs)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat Test-MtAppManagementPolicyEnabled, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Test-MtAppManagementPolicyEnabled.ps1: line 18\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-AppManagementPolicies.Tests.ps1: line 4\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "App Management Policies",
      "ResultDetail": {
        "TestDescription": "By default Microsoft Entra ID allows service principals and applications to be configured with weak credentials.\r\n\r\nThis can include\r\n\r\n- client secrets instead of certificates\r\n- secrets and certificates with long expiry (e.g. 10 year)\r\n\r\n## How to fix\r\n\r\nUsing shorter expiry periods and certificates instead of secrets can help reduce the risk of credentials being compromised and used by an attacker.\r\n\r\nThe sample policy below can be used to enforce credential configurations on apps and service principals.\r\n\r\n```powershell\r\nImport-Module Microsoft.Graph.Identity.SignIns\r\n\r\n$params = @{\r\nisEnabled = $true\r\napplicationRestrictions = @{\r\n    passwordCredentials = @(\r\n    @{\r\n        restrictionType = \"passwordAddition\"\r\n        maxLifetime = $null\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2021-01-01T10:37:00Z\")\r\n    }\r\n    @{\r\n        restrictionType = \"passwordLifetime\"\r\n        maxLifetime = \"P365D\"\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2017-01-01T10:37:00Z\")\r\n    }\r\n    @{\r\n        restrictionType = \"symmetricKeyAddition\"\r\n        maxLifetime = $null\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2021-01-01T10:37:00Z\")\r\n    }\r\n    @{\r\n        restrictionType = \"customPasswordAddition\"\r\n        maxLifetime = $null\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\r\n    }\r\n    @{\r\n        restrictionType = \"symmetricKeyLifetime\"\r\n        maxLifetime = \"P365D\"\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\r\n    }\r\n    )\r\n    keyCredentials = @(\r\n    @{\r\n        restrictionType = \"asymmetricKeyLifetime\"\r\n        maxLifetime = \"P365D\"\r\n        restrictForAppsCreatedAfterDateTime = [System.DateTime]::Parse(\"2015-01-01T10:37:00Z\")\r\n    }\r\n    )\r\n}\r\n}\r\n\r\nUpdate-MgPolicyDefaultAppManagementPolicy -BodyParameter $params\r\n```\r\n\r\n## Learn more\r\n\r\n- [Tenant App Management Policy - Microsoft Graph Reference](https://learn.microsoft.com/graph/api/resources/tenantappmanagementpolicy?view=graph-rest-1.0)\r\n",
        "SkippedReason": "This test is for tenants that are licensed for Entra Workload ID. See [Entra Workload ID licensing](https://learn.microsoft.com/entra/workload-id/workload-identities-faqs)",
        "TestResult": "Skipped. This test is for tenants that are licensed for Entra Workload ID. See [Entra Workload ID licensing](https://learn.microsoft.com/entra/workload-id/workload-identities-faqs)",
        "TestSkipped": "NotLicensedEntraWorkloadID"
      }
    },
    {
      "Name": "MT.1021: Security Defaults are enabled.",
      "HelpUrl": "https://maester.dev/docs/tests/MT.1021",
      "Tag": [
        "CA",
        "Security",
        "All"
      ],
      "Result": "Skipped",
      "ScriptBlock": "\r\n        if ($EntraIDPlan -ne \"Free\") {\r\n            Add-MtTestResultDetail -SkippedBecause LicensedEntraIDPremium\r\n        } else {\r\n            $SecurityDefaults = Invoke-MtGraphRequest -RelativeUri \"policies/identitySecurityDefaultsEnforcementPolicy\" -ApiVersion beta | Select-Object -ExpandProperty isEnabled\r\n            $SecurityDefaults | Should -Be $true -Because \"Security Defaults are not enabled\"\r\n        }\r\n    ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1",
      "ErrorRecord": [
        {
          "Exception": {
            "TargetSite": null,
            "Message": "is skipped, because This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
            "Data": "System.Collections.ListDictionaryInternal",
            "InnerException": null,
            "HelpLink": null,
            "Source": null,
            "HResult": -2146233088,
            "StackTrace": null
          },
          "TargetObject": {
            "Message": "is skipped, because This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
            "File": "/Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1",
            "Line": "132",
            "LineText": "Set-ItResult -Skipped -Because $SkippedReason",
            "Terminating": false
          },
          "CategoryInfo": {
            "Category": 8,
            "Activity": "",
            "Reason": "Exception",
            "TargetName": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "TargetType": "Dictionary`2"
          },
          "FullyQualifiedErrorId": "PesterTestSkipped",
          "ErrorDetails": null,
          "InvocationInfo": {
            "MyCommand": null,
            "BoundParameters": "System.Collections.Generic.Dictionary`2[System.String,System.Object]",
            "UnboundArguments": "",
            "ScriptLineNumber": 15218,
            "OffsetInLine": 5,
            "HistoryId": -1,
            "ScriptName": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "Line": "    throw [Pester.Factory]::CreateErrorRecord(\r\n",
            "PositionMessage": "At /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1:15218 char:5\n+     throw [Pester.Factory]::CreateErrorRecord(\n+     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~",
            "PSScriptRoot": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1",
            "PSCommandPath": "/Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1",
            "InvocationName": "",
            "PipelineLength": 0,
            "PipelinePosition": 0,
            "ExpectingInput": false,
            "CommandOrigin": 1,
            "DisplayScriptPosition": null
          },
          "ScriptStackTrace": "at Set-ItResult, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 15218\nat Add-MtTestResultDetail, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Add-MtTestResultDetail.ps1: line 132\nat <ScriptBlock>, /Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessBaseline.Tests.ps1: line 74\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2110\nat Invoke-TestItem, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1184\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 826\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 881\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1988\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1949\nat Invoke-ScriptBlock, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2113\nat Invoke-Block, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 928\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1662\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.ps1: line 3\nat <ScriptBlock>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3154\nat Invoke-InNewScriptScope, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 3161\nat Run-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 1665\nat Invoke-Test, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 2465\nat Invoke-Pester<End>, /Users/srozemuller/.local/share/powershell/Modules/Pester/5.3.1/Pester.psm1: line 5225\nat Invoke-Maester, /Users/srozemuller/.local/share/powershell/Modules/Maester/0.2.0/public/Invoke-Maester.ps1: line 256\nat <ScriptBlock>, <No file>: line 1",
          "PipelineIterationInfo": []
        }
      ],
      "Block": "Security Defaults",
      "ResultDetail": {
        "TestDescription": "",
        "SkippedReason": "This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
        "TestResult": "Skipped. This test is for tenants that are not licensed for any Entra ID Premium license. See [Entra ID licensing](https://learn.microsoft.com/entra/fundamentals/licensing)",
        "TestSkipped": "LicensedEntraIDPremium"
      }
    },
    {
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Regular users",
      "ResultDetail": null
    },
    {
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Regular users",
      "ResultDetail": null
    },
    {
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Regular users",
      "ResultDetail": null
    },
    {
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Regular users",
      "ResultDetail": null
    },
    {
      "Name": "MT.1033: User should be blocked from using legacy authentication (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            Test-MtCaWIFBlockLegacyAuthentication -UserId $id | Should -Be $true\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Regular users",
      "ResultDetail": null
    },
    {
      "Name": "MT.1034: Emergency access users should not be blocked (<userPrincipalName>)",
      "HelpUrl": "",
      "Tag": [],
      "Result": "NotRun",
      "ScriptBlock": "\r\n            if ( ( Get-MtLicenseInformation EntraID ) -eq \"Free\" ) {\r\n                Add-MtTestResultDetail -SkippedBecause NotLicensedEntraIDP1\r\n            } else {\r\n                Test-MtConditionalAccessWhatIf -UserId $id -IncludeApplications \"00000002-0000-0ff1-ce00-000000000000\" -ClientAppType exchangeActiveSync | Should -BeNullOrEmpty\r\n            }\r\n        ",
      "ScriptBlockFile": "/Users/srozemuller/Repos/Identity/MaesterTests/Maester/Entra/Test-ConditionalAccessWhatIf.Tests.ps1",
      "ErrorRecord": [],
      "Block": "Emergency access users",
      "ResultDetail": null
    }
  ],
  "Blocks": [
    {
      "Name": "Default Authorization Settings",
      "Result": "Failed",
      "FailedCount": 5,
      "PassedCount": 4,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 9,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AP01"
      ]
    },
    {
      "Name": "Default Settings - Consent Policy Settings",
      "Result": "Failed",
      "FailedCount": 3,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 3,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CP01"
      ]
    },
    {
      "Name": "Default Settings - Password Rule Settings",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 5,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 5,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.PR01"
      ]
    },
    {
      "Name": "Default Settings - Classification and M365 Groups",
      "Result": "Failed",
      "FailedCount": 2,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 2,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.ST08"
      ]
    },
    {
      "Name": "Authentication Method - General Settings",
      "Result": "Failed",
      "FailedCount": 2,
      "PassedCount": 1,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 3,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AG01"
      ]
    },
    {
      "Name": "Authentication Method - Microsoft Authenticator",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 8,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 8,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AM01"
      ]
    },
    {
      "Name": "Authentication Method - FIDO2 security key",
      "Result": "Passed",
      "FailedCount": 1,
      "PassedCount": 3,
      "SkippedCount": 2,
      "NotRunCount": 0,
      "TotalCount": 6,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AF01"
      ]
    },
    {
      "Name": "Authentication Method - Temporary Access Pass",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 2,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 2,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AT01"
      ]
    },
    {
      "Name": "Authentication Method - Voice call",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 1,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 1,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.AV01"
      ]
    },
    {
      "Name": "Consent Framework - Admin Consent Request",
      "Result": "Failed",
      "FailedCount": 1,
      "PassedCount": 0,
      "SkippedCount": 3,
      "NotRunCount": 0,
      "TotalCount": 4,
      "Tag": [
        "EIDSCA",
        "Security",
        "All",
        "EIDSCA.CR01"
      ]
    },
    {
      "Name": "CISA SCuBA",
      "Result": "Passed",
      "FailedCount": 19,
      "PassedCount": 8,
      "SkippedCount": 17,
      "NotRunCount": 0,
      "TotalCount": 44,
      "Tag": [
        "MS.EXO",
        "MS.EXO.12.1",
        "CISA",
        "Security",
        "All"
      ]
    },
    {
      "Name": "App Management Policies",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 0,
      "SkippedCount": 1,
      "NotRunCount": 0,
      "TotalCount": 1,
      "Tag": [
        "App",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Conditional Access Baseline Policies",
      "Result": "Failed",
      "FailedCount": 14,
      "PassedCount": 7,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 21,
      "Tag": [
        "CA",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Security Defaults",
      "Result": "Passed",
      "FailedCount": 0,
      "PassedCount": 0,
      "SkippedCount": 1,
      "NotRunCount": 0,
      "TotalCount": 1,
      "Tag": [
        "CA",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Conditional Access WhatIf",
      "Result": "NotRun",
      "FailedCount": 0,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 0,
      "Tag": [
        "CA",
        "CAWhatIf",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Entra Recommendations",
      "Result": "Passed",
      "FailedCount": 9,
      "PassedCount": 6,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 15,
      "Tag": [
        "Entra",
        "Security",
        "All",
        "Recommendation"
      ]
    },
    {
      "Name": "Directory Roles - Permanent assignments",
      "Result": "Failed",
      "FailedCount": 2,
      "PassedCount": 2,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 4,
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ]
    },
    {
      "Name": "Privileged Identity Management (PIM) - Alerts",
      "Result": "Failed",
      "FailedCount": 4,
      "PassedCount": 0,
      "SkippedCount": 0,
      "NotRunCount": 0,
      "TotalCount": 4,
      "Tag": [
        "Privileged",
        "Security",
        "All"
      ]
    }
  ]
}
